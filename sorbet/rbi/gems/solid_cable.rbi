# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: false
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/solid_cable/all/solid_cable.rbi
#
# solid_cable-3.0.11

module SolidCable
  def self.autotrim?; end
  def self.cable_config; end
  def self.connects_to; end
  def self.message_retention; end
  def self.parse_duration(duration, default:); end
  def self.polling_interval; end
  def self.railtie_helpers_paths; end
  def self.railtie_namespace; end
  def self.railtie_routes_url_helpers(include_path_helpers = nil); end
  def self.silence_polling?; end
  def self.table_name_prefix; end
  def self.trim_batch_size; end
  def self.trim_chance; end
  def self.use_relative_model_naming?; end
  def self.use_skip_locked; end
end
class SolidCable::Engine < Rails::Engine
end
module ActionCable
end
module ActionCable::SubscriptionAdapter
end
class ActionCable::SubscriptionAdapter::SolidCable < ActionCable::SubscriptionAdapter::Base
  def broadcast(channel, payload); end
  def initialize(*); end
  def listener; end
  def shutdown(*, **, &); end
  def subscribe(channel, callback, success_callback = nil); end
  def unsubscribe(channel, callback); end
end
class ActionCable::SubscriptionAdapter::SolidCable::Listener < ActionCable::SubscriptionAdapter::SubscriberMap
  def add_channel(channel, on_success); end
  def broadcast_messages; end
  def channels; end
  def event_loop; end
  def initialize(event_loop); end
  def interruptible; end
  def invoke_callback(*); end
  def last_message_id; end
  def listen; end
  def remove_channel(channel); end
  def shutdown; end
  def thread; end
  def with_polling_volume; end
end
class ActionCable::SubscriptionAdapter::SolidCable::Listener::Stop < Exception
end
class SolidCable::TrimJob < ActiveJob::Base
  def perform; end
  def trim?; end
  def trim_batch_size; end
end
class SolidCable::Record::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Base::GeneratedRelationMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidCable::Record::GeneratedRelationMethods
end
module SolidCable::Record::GeneratedRelationMethods
end
class SolidCable::Record::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Base::GeneratedRelationMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidCable::Record::GeneratedRelationMethods
end
class SolidCable::Record::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Base::GeneratedRelationMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidCable::Record::GeneratedRelationMethods
end
class SolidCable::Record::ActiveRecord_DisableJoinsAssociationRelation < ActiveRecord::DisableJoinsAssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Base::GeneratedRelationMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidCable::Record::GeneratedRelationMethods
end
class SolidCable::Record < ActiveRecord::Base
  def self.__class_attr__validators; end
  def self.__class_attr__validators=(new_value); end
  def self.__class_attr_defined_enums; end
  def self.__class_attr_defined_enums=(new_value); end
  def self.non_blocking_lock; end
  include SolidCable::Record::GeneratedAssociationMethods
  include SolidCable::Record::GeneratedAttributeMethods
end
module SolidCable::Record::GeneratedAttributeMethods
end
module SolidCable::Record::GeneratedAssociationMethods
end
class SolidCable::Message::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidCable::Message::GeneratedRelationMethods
  include SolidCable::Record::GeneratedRelationMethods
end
module SolidCable::Message::GeneratedRelationMethods
  def broadcastable(*, **, &); end
  def trimmable(*, **, &); end
end
class SolidCable::Message::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidCable::Message::GeneratedRelationMethods
  include SolidCable::Record::GeneratedRelationMethods
end
class SolidCable::Message::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidCable::Message::GeneratedRelationMethods
  include SolidCable::Record::GeneratedRelationMethods
end
class SolidCable::Message::ActiveRecord_DisableJoinsAssociationRelation < ActiveRecord::DisableJoinsAssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidCable::Message::GeneratedRelationMethods
  include SolidCable::Record::GeneratedRelationMethods
end
class SolidCable::Message < SolidCable::Record
  def self.__class_attr__validators; end
  def self.__class_attr__validators=(new_value); end
  def self.__class_attr_defined_enums; end
  def self.__class_attr_defined_enums=(new_value); end
  def self.broadcast(channel, payload); end
  def self.broadcastable(*args, **); end
  def self.channel_hash_for(channel); end
  def self.channel_hashes_for(channels); end
  def self.trimmable(*args, **); end
  include SolidCable::Message::GeneratedAssociationMethods
  include SolidCable::Message::GeneratedAttributeMethods
end
module SolidCable::Message::GeneratedAttributeMethods
end
module SolidCable::Message::GeneratedAssociationMethods
end
