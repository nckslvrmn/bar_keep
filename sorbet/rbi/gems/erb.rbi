# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: false
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/erb/all/erb.rbi
#
# erb-5.0.1

class ERB
  def def_class(superklass = nil, methodname = nil); end
  def def_method(mod, methodname, fname = nil); end
  def def_module(methodname = nil); end
  def encoding; end
  def filename; end
  def filename=(arg0); end
  def initialize(str, safe_level = nil, legacy_trim_mode = nil, legacy_eoutvar = nil, trim_mode: nil, eoutvar: nil); end
  def lineno; end
  def lineno=(arg0); end
  def location=(arg0); end
  def make_compiler(trim_mode); end
  def new_toplevel(vars = nil); end
  def result(b = nil); end
  def result_with_hash(hash); end
  def run(b = nil); end
  def self.version; end
  def set_eoutvar(compiler, eoutvar = nil); end
  def src; end
end
class ERB::Compiler
  def add_insert_cmd(out, content); end
  def add_put_cmd(out, content); end
  def compile(s); end
  def compile_content(stag, out); end
  def compile_etag(etag, out, scanner); end
  def compile_stag(stag, out, scanner); end
  def content; end
  def content=(arg0); end
  def detect_magic_comment(s, enc = nil); end
  def initialize(trim_mode); end
  def insert_cmd; end
  def insert_cmd=(arg0); end
  def make_scanner(src); end
  def percent; end
  def post_cmd; end
  def post_cmd=(arg0); end
  def pre_cmd; end
  def pre_cmd=(arg0); end
  def prepare_trim_mode(mode); end
  def put_cmd; end
  def put_cmd=(arg0); end
  def trim_mode; end
  def warn_invalid_trim_mode(mode, uplevel:); end
end
class ERB::Compiler::PercentLine
  def initialize(str); end
  def to_s; end
  def value; end
end
class ERB::Compiler::Scanner
  def etags; end
  def initialize(src, trim_mode, percent); end
  def scan; end
  def self.default_scanner=(klass); end
  def self.make_scanner(src, trim_mode, percent); end
  def self.regist_scanner(klass, trim_mode, percent); end
  def self.register_scanner(klass, trim_mode, percent); end
  def stag; end
  def stag=(arg0); end
  def stags; end
end
class ERB::Compiler::TrimScanner < ERB::Compiler::Scanner
  def explicit_trim_line(line); end
  def initialize(src, trim_mode, percent); end
  def is_erb_stag?(s); end
  def percent_line(line, &block); end
  def scan(&block); end
  def scan_line(line); end
  def trim_line1(line); end
  def trim_line2(line); end
end
class ERB::Compiler::SimpleScanner < ERB::Compiler::Scanner
  def scan; end
end
class ERB::Compiler::ExplicitScanner < ERB::Compiler::Scanner
  def scan; end
end
class ERB::Compiler::Buffer
  def close; end
  def cr; end
  def initialize(compiler, enc = nil, frozen = nil); end
  def push(cmd); end
  def script; end
end
module ERB::DefMethod
  def def_erb_method(methodname, erb_or_fname); end
  def self.def_erb_method(methodname, erb_or_fname); end
end
module ERB::Escape
  def html_escape(arg0); end
  def self.html_escape(arg0); end
end
module ERB::Util
  def h(s); end
  def self.h(s); end
  def self.html_escape(s); end
  def self.u(s); end
  def self.url_encode(s); end
  def u(s); end
  def url_encode(s); end
  include ERB::Escape
end
