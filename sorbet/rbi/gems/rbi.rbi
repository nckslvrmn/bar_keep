# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: false
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rbi/all/rbi.rbi
#
# rbi-0.3.6

module RBI
end
class RBI::Loc
  def begin_column; end
  def begin_line; end
  def end_column; end
  def end_line; end
  def file; end
  def initialize(file: nil, begin_line: nil, end_line: nil, begin_column: nil, end_column: nil); end
  def join(other); end
  def self.from_prism(file, prism_location); end
  def source; end
  def to_s; end
end
class RBI::ReplaceNodeError < RBI::Error
end
class RBI::Node
  def compatible_with?(_other); end
  def detach; end
  def initialize(loc: nil); end
  def loc; end
  def loc=(arg0); end
  def merge_with(other); end
  def parent_conflict_tree; end
  def parent_scope; end
  def parent_tree; end
  def parent_tree=(arg0); end
  def print(out: nil, indent: nil, print_locs: nil, max_line_length: nil); end
  def rbs_print(out: nil, indent: nil, print_locs: nil, positional_names: nil); end
  def rbs_string(indent: nil, print_locs: nil, positional_names: nil); end
  def replace(node); end
  def satisfies_version?(version); end
  def string(indent: nil, print_locs: nil, max_line_length: nil); end
end
class RBI::Comment < RBI::Node
  def ==(other); end
  def initialize(text, loc: nil); end
  def text; end
  def text=(arg0); end
end
class RBI::BlankLine < RBI::Comment
  def initialize(loc: nil); end
end
class RBI::RBSComment < RBI::Comment
  def ==(other); end
end
class RBI::NodeWithComments < RBI::Node
  def annotations; end
  def comments; end
  def comments=(arg0); end
  def initialize(loc: nil, comments: nil); end
  def merge_with(other); end
  def version_requirements; end
end
class RBI::Tree < RBI::NodeWithComments
  def <<(node); end
  def add_sig_templates!(with_todo_comment: nil); end
  def annotate!(annotation, annotate_scopes: nil, annotate_properties: nil); end
  def deannotate!(annotation); end
  def empty?; end
  def filter_versions!(version); end
  def flatten_singleton_methods!; end
  def flatten_visibilities!; end
  def group_nodes!; end
  def index; end
  def initialize(loc: nil, comments: nil, &block); end
  def merge(other, left_name: nil, right_name: nil, keep: nil); end
  def nest_non_public_members!; end
  def nest_singleton_methods!; end
  def nest_top_level_members!; end
  def nodes; end
  def replace_attributes_with_methods!; end
  def sort_nodes!; end
  def translate_rbs_sigs!; end
end
class RBI::File
  def <<(node); end
  def comments; end
  def comments=(arg0); end
  def empty?; end
  def initialize(strictness: nil, comments: nil, &block); end
  def print(out: nil, indent: nil, print_locs: nil, max_line_length: nil); end
  def rbs_print(out: nil, indent: nil, print_locs: nil); end
  def rbs_string(indent: nil, print_locs: nil); end
  def root; end
  def root=(arg0); end
  def strictness; end
  def strictness=(arg0); end
  def string(indent: nil, print_locs: nil, max_line_length: nil); end
end
class RBI::Scope < RBI::Tree
  def dup_empty; end
  def fully_qualified_name; end
  def index_ids; end
  def to_s; end
  include RBI::Indexable
end
class RBI::Module < RBI::Scope
  def compatible_with?(other); end
  def fully_qualified_name; end
  def initialize(name, loc: nil, comments: nil, &block); end
  def name; end
  def name=(arg0); end
end
class RBI::Class < RBI::Scope
  def compatible_with?(other); end
  def fully_qualified_name; end
  def initialize(name, superclass_name: nil, loc: nil, comments: nil, &block); end
  def name; end
  def name=(arg0); end
  def superclass_name; end
  def superclass_name=(arg0); end
end
class RBI::SingletonClass < RBI::Scope
  def fully_qualified_name; end
  def initialize(loc: nil, comments: nil, &block); end
end
class RBI::Struct < RBI::Scope
  def compatible_with?(other); end
  def fully_qualified_name; end
  def initialize(name, members: nil, keyword_init: nil, loc: nil, comments: nil, &block); end
  def keyword_init; end
  def keyword_init=(arg0); end
  def members; end
  def members=(arg0); end
  def name; end
  def name=(arg0); end
end
class RBI::Const < RBI::NodeWithComments
  def compatible_with?(other); end
  def fully_qualified_name; end
  def index_ids; end
  def initialize(name, value, loc: nil, comments: nil, &block); end
  def name; end
  def to_s; end
  def value; end
  include RBI::Indexable
end
class RBI::Attr < RBI::NodeWithComments
  def compatible_with?(other); end
  def convert_to_methods; end
  def create_getter_method(name, sig, visibility, loc, comments); end
  def create_setter_method(name, sig, attribute_type, visibility, loc, comments); end
  def fully_qualified_names; end
  def index_ids; end
  def initialize(name, names, visibility: nil, sigs: nil, loc: nil, comments: nil); end
  def merge_with(other); end
  def names; end
  def parse_sig; end
  def sigs; end
  def visibility; end
  def visibility=(arg0); end
  include RBI::Indexable
end
class RBI::AttrAccessor < RBI::Attr
  def compatible_with?(other); end
  def convert_to_methods; end
  def fully_qualified_names; end
  def initialize(name, *names, visibility: nil, sigs: nil, loc: nil, comments: nil, &block); end
  def to_s; end
end
class RBI::AttrReader < RBI::Attr
  def compatible_with?(other); end
  def convert_to_methods; end
  def fully_qualified_names; end
  def initialize(name, *names, visibility: nil, sigs: nil, loc: nil, comments: nil, &block); end
  def to_s; end
end
class RBI::AttrWriter < RBI::Attr
  def compatible_with?(other); end
  def convert_to_methods; end
  def fully_qualified_names; end
  def initialize(name, *names, visibility: nil, sigs: nil, loc: nil, comments: nil, &block); end
  def to_s; end
end
class RBI::Method < RBI::NodeWithComments
  def <<(param); end
  def add_block_param(name); end
  def add_kw_opt_param(name, default_value); end
  def add_kw_param(name); end
  def add_kw_rest_param(name); end
  def add_opt_param(name, default_value); end
  def add_param(name); end
  def add_rest_param(name); end
  def add_sig(params: nil, return_type: nil, is_abstract: nil, is_override: nil, is_overridable: nil, is_final: nil, type_params: nil, checked: nil, &block); end
  def compatible_with?(other); end
  def fully_qualified_name; end
  def index_ids; end
  def initialize(name, params: nil, is_singleton: nil, visibility: nil, sigs: nil, loc: nil, comments: nil, &block); end
  def is_singleton; end
  def is_singleton=(arg0); end
  def merge_with(other); end
  def name; end
  def name=(arg0); end
  def params; end
  def sigs; end
  def sigs=(arg0); end
  def to_s; end
  def visibility; end
  def visibility=(arg0); end
  include RBI::Indexable
end
class RBI::Param < RBI::NodeWithComments
  def initialize(name, loc: nil, comments: nil); end
  def name; end
  def to_s; end
end
class RBI::ReqParam < RBI::Param
  def ==(other); end
  def initialize(name, loc: nil, comments: nil, &block); end
end
class RBI::OptParam < RBI::Param
  def ==(other); end
  def initialize(name, value, loc: nil, comments: nil, &block); end
  def value; end
end
class RBI::RestParam < RBI::Param
  def ==(other); end
  def initialize(name, loc: nil, comments: nil, &block); end
  def to_s; end
end
class RBI::KwParam < RBI::Param
  def ==(other); end
  def initialize(name, loc: nil, comments: nil, &block); end
  def to_s; end
end
class RBI::KwOptParam < RBI::Param
  def ==(other); end
  def initialize(name, value, loc: nil, comments: nil, &block); end
  def to_s; end
  def value; end
end
class RBI::KwRestParam < RBI::Param
  def ==(other); end
  def initialize(name, loc: nil, comments: nil, &block); end
  def to_s; end
end
class RBI::BlockParam < RBI::Param
  def ==(other); end
  def initialize(name, loc: nil, comments: nil, &block); end
  def to_s; end
end
class RBI::Mixin < RBI::NodeWithComments
  def compatible_with?(other); end
  def initialize(name, names, loc: nil, comments: nil); end
  def names; end
end
class RBI::Include < RBI::Mixin
  def compatible_with?(other); end
  def index_ids; end
  def initialize(name, *names, loc: nil, comments: nil, &block); end
  def to_s; end
  include RBI::Indexable
end
class RBI::Extend < RBI::Mixin
  def compatible_with?(other); end
  def index_ids; end
  def initialize(name, *names, loc: nil, comments: nil, &block); end
  def to_s; end
  include RBI::Indexable
end
class RBI::Visibility < RBI::NodeWithComments
  def ==(other); end
  def initialize(visibility, loc: nil, comments: nil); end
  def private?; end
  def protected?; end
  def public?; end
  def visibility; end
end
class RBI::Public < RBI::Visibility
  def initialize(loc: nil, comments: nil, &block); end
end
class RBI::Protected < RBI::Visibility
  def initialize(loc: nil, comments: nil, &block); end
end
class RBI::Private < RBI::Visibility
  def initialize(loc: nil, comments: nil, &block); end
end
class RBI::Send < RBI::NodeWithComments
  def <<(arg); end
  def ==(other); end
  def args; end
  def compatible_with?(other); end
  def index_ids; end
  def initialize(method, args = nil, loc: nil, comments: nil, &block); end
  def method; end
  def to_s; end
  include RBI::Indexable
end
class RBI::Arg < RBI::Node
  def ==(other); end
  def initialize(value, loc: nil); end
  def to_s; end
  def value; end
end
class RBI::KwArg < RBI::Arg
  def ==(other); end
  def initialize(keyword, value, loc: nil); end
  def keyword; end
  def to_s; end
end
class RBI::Sig < RBI::NodeWithComments
  def <<(param); end
  def ==(other); end
  def add_param(name, type); end
  def allow_incompatible_override; end
  def allow_incompatible_override=(arg0); end
  def checked; end
  def checked=(arg0); end
  def initialize(params: nil, return_type: nil, is_abstract: nil, is_override: nil, is_overridable: nil, is_final: nil, allow_incompatible_override: nil, without_runtime: nil, type_params: nil, checked: nil, loc: nil, comments: nil, &block); end
  def is_abstract; end
  def is_abstract=(arg0); end
  def is_final; end
  def is_final=(arg0); end
  def is_overridable; end
  def is_overridable=(arg0); end
  def is_override; end
  def is_override=(arg0); end
  def params; end
  def return_type; end
  def return_type=(arg0); end
  def type_params; end
  def without_runtime; end
  def without_runtime=(arg0); end
end
class RBI::SigParam < RBI::NodeWithComments
  def ==(other); end
  def initialize(name, type, loc: nil, comments: nil, &block); end
  def name; end
  def type; end
end
class RBI::TStruct < RBI::Class
  def initialize(name, loc: nil, comments: nil, &block); end
end
class RBI::TStructField < RBI::NodeWithComments
  def compatible_with?(other); end
  def default; end
  def default=(arg0); end
  def fully_qualified_names; end
  def initialize(name, type, default: nil, loc: nil, comments: nil); end
  def name; end
  def name=(arg0); end
  def type; end
  def type=(arg0); end
end
class RBI::TStructConst < RBI::TStructField
  def compatible_with?(other); end
  def fully_qualified_names; end
  def index_ids; end
  def initialize(name, type, default: nil, loc: nil, comments: nil, &block); end
  def to_s; end
  include RBI::Indexable
end
class RBI::TStructProp < RBI::TStructField
  def compatible_with?(other); end
  def fully_qualified_names; end
  def index_ids; end
  def initialize(name, type, default: nil, loc: nil, comments: nil, &block); end
  def to_s; end
  include RBI::Indexable
end
class RBI::TEnum < RBI::Class
  def initialize(name, loc: nil, comments: nil, &block); end
end
class RBI::TEnumBlock < RBI::Scope
  def fully_qualified_name; end
  def index_ids; end
  def initialize(loc: nil, comments: nil, &block); end
  def to_s; end
  include RBI::Indexable
end
class RBI::TEnumValue < RBI::NodeWithComments
  def fully_qualified_name; end
  def index_ids; end
  def initialize(name, loc: nil, comments: nil, &block); end
  def name; end
  def to_s; end
  include RBI::Indexable
end
class RBI::Helper < RBI::NodeWithComments
  def compatible_with?(other); end
  def index_ids; end
  def initialize(name, loc: nil, comments: nil, &block); end
  def name; end
  def to_s; end
  include RBI::Indexable
end
class RBI::TypeMember < RBI::NodeWithComments
  def fully_qualified_name; end
  def index_ids; end
  def initialize(name, value, loc: nil, comments: nil, &block); end
  def name; end
  def to_s; end
  def value; end
  include RBI::Indexable
end
class RBI::MixesInClassMethods < RBI::Mixin
  def compatible_with?(other); end
  def index_ids; end
  def initialize(name, *names, loc: nil, comments: nil, &block); end
  def to_s; end
  include RBI::Indexable
end
class RBI::RequiresAncestor < RBI::NodeWithComments
  def index_ids; end
  def initialize(name, loc: nil, comments: nil); end
  def name; end
  def to_s; end
  include RBI::Indexable
end
class RBI::Type
  def ==(other); end
  def eql?(other); end
  def hash; end
  def initialize; end
  def nilable; end
  def nilable?; end
  def non_nilable; end
  def normalize; end
  def rbs_string; end
  def self.all(type1, type2, *types); end
  def self.any(type1, type2, *types); end
  def self.anything; end
  def self.attached_class; end
  def self.boolean; end
  def self.call_chain(node); end
  def self.check_arguments_at_least!(node, count); end
  def self.check_arguments_exactly!(node, count); end
  def self.class_of(type, type_parameter = nil); end
  def self.generic(name, *params); end
  def self.nilable(type); end
  def self.noreturn; end
  def self.parse_call(node); end
  def self.parse_constant(node); end
  def self.parse_node(node); end
  def self.parse_proc(node); end
  def self.parse_shape(node); end
  def self.parse_string(string); end
  def self.parse_tuple(node); end
  def self.proc; end
  def self.self_type; end
  def self.shape(types = nil); end
  def self.simple(name); end
  def self.t?(node); end
  def self.t_boolean?(node); end
  def self.t_class(type); end
  def self.t_class?(node); end
  def self.t_class_of?(node); end
  def self.t_proc?(node); end
  def self.tuple(*types); end
  def self.type_parameter(name); end
  def self.untyped; end
  def self.valid_identifier?(name); end
  def self.void; end
  def simplify; end
  def to_rbi; end
  def to_s; end
end
class RBI::Type::Simple < RBI::Type
  def ==(other); end
  def initialize(name); end
  def name; end
  def normalize; end
  def simplify; end
  def to_rbi; end
end
class RBI::Type::Anything < RBI::Type
  def ==(other); end
  def normalize; end
  def simplify; end
  def to_rbi; end
end
class RBI::Type::AttachedClass < RBI::Type
  def ==(other); end
  def normalize; end
  def simplify; end
  def to_rbi; end
end
class RBI::Type::Boolean < RBI::Type
  def ==(other); end
  def normalize; end
  def simplify; end
  def to_rbi; end
end
class RBI::Type::NoReturn < RBI::Type
  def ==(other); end
  def normalize; end
  def simplify; end
  def to_rbi; end
end
class RBI::Type::SelfType < RBI::Type
  def ==(other); end
  def normalize; end
  def simplify; end
  def to_rbi; end
end
class RBI::Type::Untyped < RBI::Type
  def ==(other); end
  def normalize; end
  def simplify; end
  def to_rbi; end
end
class RBI::Type::Void < RBI::Type
  def ==(other); end
  def normalize; end
  def simplify; end
  def to_rbi; end
end
class RBI::Type::Class < RBI::Type
  def ==(other); end
  def initialize(type); end
  def normalize; end
  def simplify; end
  def to_rbi; end
  def type; end
end
class RBI::Type::ClassOf < RBI::Type
  def ==(other); end
  def initialize(type, type_parameter = nil); end
  def normalize; end
  def simplify; end
  def to_rbi; end
  def type; end
  def type_parameter; end
end
class RBI::Type::Nilable < RBI::Type
  def ==(other); end
  def initialize(type); end
  def normalize; end
  def simplify; end
  def to_rbi; end
  def type; end
end
class RBI::Type::Composite < RBI::Type
  def ==(other); end
  def initialize(types); end
  def types; end
end
class RBI::Type::All < RBI::Type::Composite
  def normalize; end
  def simplify; end
  def to_rbi; end
end
class RBI::Type::Any < RBI::Type::Composite
  def nilable?; end
  def normalize; end
  def simplify; end
  def to_rbi; end
end
class RBI::Type::Generic < RBI::Type
  def ==(other); end
  def initialize(name, *params); end
  def name; end
  def normalize; end
  def params; end
  def simplify; end
  def to_rbi; end
end
class RBI::Type::TypeParameter < RBI::Type
  def ==(other); end
  def initialize(name); end
  def name; end
  def normalize; end
  def simplify; end
  def to_rbi; end
end
class RBI::Type::Tuple < RBI::Type
  def ==(other); end
  def initialize(types); end
  def normalize; end
  def simplify; end
  def to_rbi; end
  def types; end
end
class RBI::Type::Shape < RBI::Type
  def ==(other); end
  def initialize(types); end
  def normalize; end
  def simplify; end
  def to_rbi; end
  def types; end
end
class RBI::Type::Proc < RBI::Type
  def ==(other); end
  def bind(type); end
  def initialize; end
  def normalize; end
  def params(**params); end
  def proc_bind; end
  def proc_params; end
  def proc_returns; end
  def returns(type); end
  def simplify; end
  def to_rbi; end
  def void; end
end
class RBI::VisitorError < RBI::Error
end
class RBI::Visitor
  def visit(node); end
  def visit_all(nodes); end
  def visit_arg(node); end
  def visit_attr_accessor(node); end
  def visit_attr_reader(node); end
  def visit_attr_writer(node); end
  def visit_blank_line(node); end
  def visit_block_param(node); end
  def visit_class(node); end
  def visit_comment(node); end
  def visit_conflict_tree(node); end
  def visit_const(node); end
  def visit_extend(node); end
  def visit_file(file); end
  def visit_group(node); end
  def visit_helper(node); end
  def visit_include(node); end
  def visit_kw_arg(node); end
  def visit_kw_opt_param(node); end
  def visit_kw_param(node); end
  def visit_kw_rest_param(node); end
  def visit_method(node); end
  def visit_mixes_in_class_methods(node); end
  def visit_module(node); end
  def visit_opt_param(node); end
  def visit_private(node); end
  def visit_protected(node); end
  def visit_public(node); end
  def visit_rbs_comment(node); end
  def visit_req_param(node); end
  def visit_requires_ancestor(node); end
  def visit_rest_param(node); end
  def visit_scope_conflict(node); end
  def visit_send(node); end
  def visit_sig(node); end
  def visit_sig_param(node); end
  def visit_singleton_class(node); end
  def visit_struct(node); end
  def visit_tenum(node); end
  def visit_tenum_block(node); end
  def visit_tenum_value(node); end
  def visit_tree(node); end
  def visit_tstruct(node); end
  def visit_tstruct_const(node); end
  def visit_tstruct_prop(node); end
  def visit_type_member(node); end
  def visit_visibility_group(node); end
end
class RBI::Index < RBI::Visitor
  def [](id); end
  def index(*nodes); end
  def index_node(node); end
  def initialize; end
  def keys; end
  def self.index(*node); end
  def visit(node); end
end
module RBI::Indexable
  def index_ids; end
end
module RBI::RBS
end
class RBI::RBS::MethodTypeTranslator
  def initialize(method); end
  def result; end
  def self.translate(method, type); end
  def translate_function_param(param, index); end
  def translate_type(type); end
  def visit(type); end
  def visit_block_type(type); end
  def visit_function_type(type); end
end
class RBI::RBS::MethodTypeTranslator::Error < RBI::Error
end
class RBI::RBS::TypeTranslator
  def self.translate(type); end
  def self.translate_class_instance(type); end
  def self.translate_function(type); end
  def self.translate_t_generic_type(type_name); end
end
module RBI::Rewriters
end
class RBI::Rewriters::AddSigTemplates < RBI::Visitor
  def add_attr_sig(attr); end
  def add_method_sig(method); end
  def add_todo_comment(node); end
  def initialize(with_todo_comment: nil); end
  def visit(node); end
end
class RBI::Rewriters::Annotate < RBI::Visitor
  def annotate_node(node); end
  def initialize(annotation, annotate_scopes: nil, annotate_properties: nil); end
  def root?(node); end
  def visit(node); end
end
class RBI::Rewriters::Deannotate < RBI::Visitor
  def deannotate_node(node); end
  def initialize(annotation); end
  def visit(node); end
end
class RBI::Rewriters::FilterVersions < RBI::Visitor
  def initialize(version); end
  def self.filter(tree, version); end
  def visit(node); end
end
class RBI::Rewriters::FlattenSingletonMethods < RBI::Visitor
  def visit(node); end
end
class RBI::Rewriters::FlattenVisibilities < RBI::Visitor
  def initialize; end
  def visit(node); end
end
class RBI::Rewriters::Merge
  def initialize(left_name: nil, right_name: nil, keep: nil); end
  def merge(tree); end
  def self.merge_trees(left, right, left_name: nil, right_name: nil, keep: nil); end
  def tree; end
end
class RBI::Rewriters::Merge::Keep
  def self.new(*, **); end
end
class RBI::Rewriters::Merge::Conflict
  def initialize(left:, right:, left_name:, right_name:); end
  def left; end
  def left_name; end
  def right; end
  def right_name; end
  def to_s; end
end
class RBI::Rewriters::Merge::TreeMerger < RBI::Visitor
  def conflicts; end
  def current_scope; end
  def initialize(output, left_name: nil, right_name: nil, keep: nil); end
  def make_conflict_scope(left, right); end
  def make_conflict_tree(left, right); end
  def previous_definition(node); end
  def replace_scope_header(left, right); end
  def visit(node); end
end
class RBI::Rewriters::Merge::ConflictTreeMerger < RBI::Visitor
  def merge_conflict_trees(left, right); end
  def visit(node); end
  def visit_all(nodes); end
end
class RBI::MergeTree < RBI::Tree
  def conflicts; end
  def initialize(loc: nil, comments: nil, conflicts: nil, &block); end
end
class RBI::DuplicateNodeError < RBI::Error
end
class RBI::ConflictTree < RBI::Tree
  def initialize(left_name: nil, right_name: nil); end
  def left; end
  def left_name; end
  def right; end
  def right_name; end
end
class RBI::ScopeConflict < RBI::Tree
  def initialize(left:, right:, left_name: nil, right_name: nil); end
  def left; end
  def left_name; end
  def right; end
  def right_name; end
end
class RBI::Rewriters::NestNonPublicMembers < RBI::Visitor
  def visit(node); end
end
class RBI::VisibilityGroup < RBI::Tree
  def initialize(visibility); end
  def visibility; end
end
class RBI::Rewriters::NestSingletonMethods < RBI::Visitor
  def visit(node); end
end
class RBI::Rewriters::NestTopLevelMembers < RBI::Visitor
  def initialize; end
  def visit(node); end
end
class RBI::GroupNodesError < RBI::Error
end
class RBI::Rewriters::GroupNodes < RBI::Visitor
  def group_kind(node); end
  def visit(node); end
end
class RBI::Group < RBI::Tree
  def initialize(kind); end
  def kind; end
end
class RBI::Group::Kind
  def self.new(*, **); end
end
class RBI::Rewriters::RemoveKnownDefinitions < RBI::Visitor
  def can_delete_node?(node, previous); end
  def delete_node(node, previous); end
  def initialize(index); end
  def operations; end
  def previous_definition_for(node); end
  def self.remove(tree, index); end
  def visit(node); end
  def visit_all(nodes); end
end
class RBI::Rewriters::RemoveKnownDefinitions::Operation
  def deleted_node; end
  def duplicate_of; end
  def initialize(deleted_node:, duplicate_of:); end
  def to_s; end
end
class RBI::UnexpectedMultipleSigsError < RBI::Error
  def initialize(node); end
  def node; end
end
class RBI::Rewriters::AttrToMethods < RBI::Visitor
  def replace(node, with:); end
  def visit(node); end
end
class RBI::Rewriters::SortNodes < RBI::Visitor
  def group_rank(kind); end
  def node_name(node); end
  def node_rank(node); end
  def sort_node_names!(node); end
  def visit(node); end
end
class RBI::Rewriters::TranslateRBSSigs < RBI::Visitor
  def extract_rbs_comments(node); end
  def translate_rbs_attr_type(node, comment); end
  def translate_rbs_method_type(node, comment); end
  def visit(node); end
end
class RBI::Rewriters::TranslateRBSSigs::Error < RBI::Error
end
class RBI::ParseError < RBI::Error
  def initialize(message, location); end
  def location; end
end
class RBI::UnexpectedParserError < RBI::Error
  def initialize(parent_exception, last_location); end
  def last_location; end
  def print_debug(io: nil); end
end
class RBI::Parser
  def parse(source, file:); end
  def parse_file(path); end
  def parse_string(string); end
  def self.parse_file(path); end
  def self.parse_files(paths); end
  def self.parse_string(string); end
  def self.parse_strings(strings); end
end
class RBI::Parser::Visitor < Prism::Visitor
  def adjust_prism_location_for_heredoc(node); end
  def initialize(source, file:); end
  def node_loc(node); end
  def node_string!(node); end
  def node_string(node); end
  def self?(node); end
  def t_sig_without_runtime?(node); end
end
class RBI::Parser::TreeBuilder < RBI::Parser::Visitor
  def collect_dangling_comments(node); end
  def collect_orphan_comments; end
  def current_scope; end
  def current_sigs; end
  def detach_comments_from_sigs(sigs); end
  def initialize(source, comments:, file:); end
  def last_node; end
  def node_comments(node); end
  def parse_comment(node); end
  def parse_params(node); end
  def parse_send_args(node); end
  def parse_sig(node); end
  def parse_struct(node); end
  def parse_tstruct_field(send); end
  def parse_visibility(name, node); end
  def separate_header_comments; end
  def set_root_tree_loc; end
  def t_enum_value?(node); end
  def tree; end
  def type_variable_definition?(node); end
  def visit_call_node(node); end
  def visit_class_node(node); end
  def visit_constant_assign(node); end
  def visit_constant_path_write_node(node); end
  def visit_constant_write_node(node); end
  def visit_def_node(node); end
  def visit_module_node(node); end
  def visit_program_node(node); end
  def visit_singleton_class_node(node); end
end
class RBI::Parser::SigBuilder < RBI::Parser::Visitor
  def current; end
  def initialize(content, file:); end
  def visit_assoc_node(node); end
  def visit_call_node(node); end
end
class RBI::Parser::HeredocLocationVisitor < Prism::Visitor
  def handle_string_node(node); end
  def initialize(source, begin_offset, end_offset); end
  def location; end
  def visit_interpolated_string_node(node); end
  def visit_string_node(node); end
end
class RBI::Type::Error < RBI::Error
end
class RBI::Type::Visitor
  def visit(node); end
  def visit_all(type); end
  def visit_any(type); end
  def visit_anything(type); end
  def visit_attached_class(type); end
  def visit_boolean(type); end
  def visit_class(type); end
  def visit_class_of(type); end
  def visit_generic(type); end
  def visit_nilable(type); end
  def visit_no_return(type); end
  def visit_proc(type); end
  def visit_self_type(type); end
  def visit_shape(type); end
  def visit_simple(type); end
  def visit_tuple(type); end
  def visit_type_parameter(type); end
  def visit_untyped(type); end
  def visit_void(type); end
end
class RBI::Type::Visitor::Error < RBI::Error
end
class RBI::PrinterError < RBI::Error
end
class RBI::Printer < RBI::Visitor
  def current_indent; end
  def dedent; end
  def in_visibility_group; end
  def in_visibility_group=(arg0); end
  def indent; end
  def initialize(out: nil, indent: nil, print_locs: nil, max_line_length: nil); end
  def max_line_length; end
  def oneline?(node); end
  def previous_node; end
  def print(string); end
  def print_blank_line_before(node); end
  def print_loc(node); end
  def print_locs; end
  def print_locs=(arg0); end
  def print_param_comment_leading_space(node, last:); end
  def print_sig_as_block(node); end
  def print_sig_as_line(node); end
  def print_sig_param_comment_leading_space(node, last:); end
  def printl(string); end
  def printn(string = nil); end
  def printt(string = nil); end
  def sig_modifiers(node); end
  def visit_all(nodes); end
  def visit_arg(node); end
  def visit_attr(node); end
  def visit_attr_accessor(node); end
  def visit_attr_reader(node); end
  def visit_attr_writer(node); end
  def visit_blank_line(node); end
  def visit_block_param(node); end
  def visit_class(node); end
  def visit_comment(node); end
  def visit_conflict_tree(node); end
  def visit_const(node); end
  def visit_extend(node); end
  def visit_file(file); end
  def visit_group(node); end
  def visit_helper(node); end
  def visit_include(node); end
  def visit_kw_arg(node); end
  def visit_kw_opt_param(node); end
  def visit_kw_param(node); end
  def visit_kw_rest_param(node); end
  def visit_method(node); end
  def visit_mixes_in_class_methods(node); end
  def visit_mixin(node); end
  def visit_module(node); end
  def visit_opt_param(node); end
  def visit_private(node); end
  def visit_protected(node); end
  def visit_public(node); end
  def visit_rbs_comment(node); end
  def visit_req_param(node); end
  def visit_requires_ancestor(node); end
  def visit_rest_param(node); end
  def visit_scope(node); end
  def visit_scope_body(node); end
  def visit_scope_conflict(node); end
  def visit_scope_header(node); end
  def visit_send(node); end
  def visit_sig(node); end
  def visit_sig_param(node); end
  def visit_singleton_class(node); end
  def visit_struct(node); end
  def visit_t_struct_field(node); end
  def visit_tenum(node); end
  def visit_tenum_block(node); end
  def visit_tenum_value(node); end
  def visit_tree(node); end
  def visit_tstruct(node); end
  def visit_tstruct_const(node); end
  def visit_tstruct_prop(node); end
  def visit_type_member(node); end
  def visit_visibility(node); end
  def visit_visibility_group(node); end
end
class RBI::RBSPrinter < RBI::Visitor
  def current_indent; end
  def dedent; end
  def in_visibility_group; end
  def in_visibility_group=(arg0); end
  def indent; end
  def initialize(out: nil, indent: nil, print_locs: nil, positional_names: nil, max_line_length: nil); end
  def max_line_length; end
  def oneline?(node); end
  def parse_t_let(code); end
  def parse_type(type); end
  def positional_names; end
  def positional_names=(arg0); end
  def previous_node; end
  def print(string); end
  def print_attr_sig(node, sig); end
  def print_blank_line_before(node); end
  def print_loc(node); end
  def print_locs; end
  def print_locs=(arg0); end
  def print_method_sig(node, sig); end
  def print_method_sig_inline(node, sig); end
  def print_method_sig_multiline(node, sig); end
  def print_param_comment_leading_space(node, last:); end
  def print_sig_param(node, param); end
  def print_sig_param_comment_leading_space(node, last:); end
  def printl(string); end
  def printn(string = nil); end
  def printt(string = nil); end
  def visit_all(nodes); end
  def visit_arg(node); end
  def visit_attr(node); end
  def visit_attr_accessor(node); end
  def visit_attr_reader(node); end
  def visit_attr_writer(node); end
  def visit_blank_line(node); end
  def visit_block_param(node); end
  def visit_class(node); end
  def visit_comment(node); end
  def visit_conflict_tree(node); end
  def visit_const(node); end
  def visit_extend(node); end
  def visit_file(file); end
  def visit_group(node); end
  def visit_helper(node); end
  def visit_include(node); end
  def visit_kw_arg(node); end
  def visit_kw_opt_param(node); end
  def visit_kw_param(node); end
  def visit_kw_rest_param(node); end
  def visit_method(node); end
  def visit_mixes_in_class_methods(node); end
  def visit_mixin(node); end
  def visit_module(node); end
  def visit_opt_param(node); end
  def visit_private(node); end
  def visit_protected(node); end
  def visit_public(node); end
  def visit_req_param(node); end
  def visit_requires_ancestor(node); end
  def visit_rest_param(node); end
  def visit_scope(node); end
  def visit_scope_body(node); end
  def visit_scope_conflict(node); end
  def visit_scope_header(node); end
  def visit_send(node); end
  def visit_sig(node); end
  def visit_sig_param(node); end
  def visit_singleton_class(node); end
  def visit_struct(node); end
  def visit_tenum(node); end
  def visit_tenum_block(node); end
  def visit_tenum_value(node); end
  def visit_tree(node); end
  def visit_tstruct(node); end
  def visit_tstruct_const(node); end
  def visit_tstruct_prop(node); end
  def visit_type_member(node); end
  def visit_visibility(node); end
  def visit_visibility_group(node); end
end
class RBI::RBSPrinter::Error < RBI::Error
end
class RBI::TypePrinter
  def initialize(max_line_length: nil); end
  def string; end
  def translate_t_type(type_name); end
  def visit(node); end
  def visit_all(type); end
  def visit_any(type); end
  def visit_anything(type); end
  def visit_attached_class(type); end
  def visit_boolean(type); end
  def visit_class(type); end
  def visit_class_of(type); end
  def visit_generic(type); end
  def visit_nilable(type); end
  def visit_no_return(type); end
  def visit_proc(type); end
  def visit_self_type(type); end
  def visit_shape(type); end
  def visit_simple(type); end
  def visit_tuple(type); end
  def visit_type_parameter(type); end
  def visit_untyped(type); end
  def visit_void(type); end
end
class RBI::Formatter
  def format_file(file); end
  def format_tree(tree); end
  def initialize(add_sig_templates: nil, group_nodes: nil, max_line_length: nil, nest_singleton_methods: nil, nest_non_public_members: nil, sort_nodes: nil, replace_attributes_with_methods: nil); end
  def max_line_length; end
  def max_line_length=(arg0); end
  def print_file(file); end
end
class RBI::Error < StandardError
end
