# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/prism/all/prism.rbi
#
# prism-1.4.0

module Prism
  def self.dump(*arg0); end
  def self.dump_file(*arg0); end
  def self.lex(*arg0); end
  def self.lex_compat(source, **options); end
  def self.lex_file(*arg0); end
  def self.lex_ripper(source); end
  def self.load(source, serialized, freeze = nil); end
  def self.parse(*arg0); end
  def self.parse_comments(*arg0); end
  def self.parse_failure?(*arg0); end
  def self.parse_file(*arg0); end
  def self.parse_file_comments(*arg0); end
  def self.parse_file_failure?(*arg0); end
  def self.parse_file_success?(*arg0); end
  def self.parse_lex(*arg0); end
  def self.parse_lex_file(*arg0); end
  def self.parse_stream(*arg0); end
  def self.parse_success?(*arg0); end
  def self.profile(*arg0); end
  def self.profile_file(*arg0); end
  def self.scope(locals: nil, forwarding: nil); end
end
class Prism::Node
  def accept(visitor); end
  def breadth_first_search(&block); end
  def cached_end_code_units_column(cache); end
  def cached_end_code_units_offset(cache); end
  def cached_start_code_units_column(cache); end
  def cached_start_code_units_offset(cache); end
  def child_nodes; end
  def comment_targets; end
  def comments; end
  def compact_child_nodes; end
  def deconstruct; end
  def deprecated(*replacements); end
  def end_character_column; end
  def end_character_offset; end
  def end_column; end
  def end_line; end
  def end_offset; end
  def flags; end
  def inspect; end
  def leading_comments; end
  def location; end
  def newline?; end
  def node_id; end
  def pretty_print(q); end
  def save(repository); end
  def save_location(repository); end
  def script_lines; end
  def self.fields; end
  def self.type; end
  def slice; end
  def slice_lines; end
  def source; end
  def source_lines; end
  def start_character_column; end
  def start_character_offset; end
  def start_column; end
  def start_line; end
  def start_offset; end
  def static_literal?; end
  def to_dot; end
  def trailing_comments; end
  def tunnel(line, column); end
  def type; end
end
class Prism::AliasGlobalVariableNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, new_name: nil, old_name: nil, keyword_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, new_name, old_name, keyword_loc); end
  def inspect; end
  def keyword; end
  def keyword_loc; end
  def new_name; end
  def old_name; end
  def save_keyword_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::AliasMethodNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, new_name: nil, old_name: nil, keyword_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, new_name, old_name, keyword_loc); end
  def inspect; end
  def keyword; end
  def keyword_loc; end
  def new_name; end
  def old_name; end
  def save_keyword_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::AlternationPatternNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, left: nil, right: nil, operator_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, left, right, operator_loc); end
  def inspect; end
  def left; end
  def operator; end
  def operator_loc; end
  def right; end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::AndNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, left: nil, right: nil, operator_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, left, right, operator_loc); end
  def inspect; end
  def left; end
  def operator; end
  def operator_loc; end
  def right; end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::ArgumentsNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def arguments; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def contains_forwarding?; end
  def contains_keyword_splat?; end
  def contains_keywords?; end
  def contains_multiple_splats?; end
  def contains_splat?; end
  def copy(node_id: nil, location: nil, flags: nil, arguments: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, arguments); end
  def inspect; end
  def self.type; end
  def type; end
end
class Prism::ArrayNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def contains_splat?; end
  def copy(node_id: nil, location: nil, flags: nil, elements: nil, opening_loc: nil, closing_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def elements; end
  def initialize(source, node_id, location, flags, elements, opening_loc, closing_loc); end
  def inspect; end
  def opening; end
  def opening_loc; end
  def save_closing_loc(repository); end
  def save_opening_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::ArrayPatternNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def constant; end
  def copy(node_id: nil, location: nil, flags: nil, constant: nil, requireds: nil, rest: nil, posts: nil, opening_loc: nil, closing_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, constant, requireds, rest, posts, opening_loc, closing_loc); end
  def inspect; end
  def opening; end
  def opening_loc; end
  def posts; end
  def requireds; end
  def rest; end
  def save_closing_loc(repository); end
  def save_opening_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::AssocNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, key: nil, value: nil, operator_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, key, value, operator_loc); end
  def inspect; end
  def key; end
  def operator; end
  def operator_loc; end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::AssocSplatNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, value: nil, operator_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, value, operator_loc); end
  def inspect; end
  def operator; end
  def operator_loc; end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::BackReferenceReadNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name); end
  def inspect; end
  def name; end
  def self.type; end
  def type; end
end
class Prism::BeginNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def begin_keyword; end
  def begin_keyword_loc; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, begin_keyword_loc: nil, statements: nil, rescue_clause: nil, else_clause: nil, ensure_clause: nil, end_keyword_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def else_clause; end
  def end_keyword; end
  def end_keyword_loc; end
  def ensure_clause; end
  def initialize(source, node_id, location, flags, begin_keyword_loc, statements, rescue_clause, else_clause, ensure_clause, end_keyword_loc); end
  def inspect; end
  def rescue_clause; end
  def save_begin_keyword_loc(repository); end
  def save_end_keyword_loc(repository); end
  def self.type; end
  def statements; end
  def type; end
end
class Prism::BlockArgumentNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, expression: nil, operator_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def expression; end
  def initialize(source, node_id, location, flags, expression, operator_loc); end
  def inspect; end
  def operator; end
  def operator_loc; end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::BlockLocalVariableNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name); end
  def inspect; end
  def name; end
  def repeated_parameter?; end
  def self.type; end
  def type; end
end
class Prism::BlockNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def body; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, locals: nil, parameters: nil, body: nil, opening_loc: nil, closing_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, locals, parameters, body, opening_loc, closing_loc); end
  def inspect; end
  def locals; end
  def opening; end
  def opening_loc; end
  def parameters; end
  def save_closing_loc(repository); end
  def save_opening_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::BlockParameterNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil, name_loc: nil, operator_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name, name_loc, operator_loc); end
  def inspect; end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def repeated_parameter?; end
  def save_name_loc(repository); end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::BlockParametersNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, parameters: nil, locals: nil, opening_loc: nil, closing_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, parameters, locals, opening_loc, closing_loc); end
  def inspect; end
  def locals; end
  def opening; end
  def opening_loc; end
  def parameters; end
  def save_closing_loc(repository); end
  def save_opening_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::BreakNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def arguments; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, arguments: nil, keyword_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, arguments, keyword_loc); end
  def inspect; end
  def keyword; end
  def keyword_loc; end
  def save_keyword_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::CallAndWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def attribute_write?; end
  def call_operator; end
  def call_operator_loc; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, receiver: nil, call_operator_loc: nil, message_loc: nil, read_name: nil, write_name: nil, operator_loc: nil, value: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def ignore_visibility?; end
  def initialize(source, node_id, location, flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator_loc, value); end
  def inspect; end
  def message; end
  def message_loc; end
  def operator; end
  def operator_loc; end
  def read_name; end
  def receiver; end
  def safe_navigation?; end
  def save_call_operator_loc(repository); end
  def save_message_loc(repository); end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
  def value; end
  def variable_call?; end
  def write_name; end
end
class Prism::CallNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def arguments; end
  def attribute_write?; end
  def block; end
  def call_operator; end
  def call_operator_loc; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, receiver: nil, call_operator_loc: nil, name: nil, message_loc: nil, opening_loc: nil, arguments: nil, closing_loc: nil, block: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def full_message_loc; end
  def ignore_visibility?; end
  def initialize(source, node_id, location, flags, receiver, call_operator_loc, name, message_loc, opening_loc, arguments, closing_loc, block); end
  def inspect; end
  def message; end
  def message_loc; end
  def name; end
  def opening; end
  def opening_loc; end
  def receiver; end
  def safe_navigation?; end
  def save_call_operator_loc(repository); end
  def save_closing_loc(repository); end
  def save_message_loc(repository); end
  def save_opening_loc(repository); end
  def self.type; end
  def type; end
  def variable_call?; end
end
class Prism::CallOperatorWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def attribute_write?; end
  def binary_operator; end
  def binary_operator_loc; end
  def call_operator; end
  def call_operator_loc; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, receiver: nil, call_operator_loc: nil, message_loc: nil, read_name: nil, write_name: nil, binary_operator: nil, binary_operator_loc: nil, value: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def ignore_visibility?; end
  def initialize(source, node_id, location, flags, receiver, call_operator_loc, message_loc, read_name, write_name, binary_operator, binary_operator_loc, value); end
  def inspect; end
  def message; end
  def message_loc; end
  def operator; end
  def operator_loc; end
  def read_name; end
  def receiver; end
  def safe_navigation?; end
  def save_binary_operator_loc(repository); end
  def save_call_operator_loc(repository); end
  def save_message_loc(repository); end
  def self.type; end
  def type; end
  def value; end
  def variable_call?; end
  def write_name; end
end
class Prism::CallOrWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def attribute_write?; end
  def call_operator; end
  def call_operator_loc; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, receiver: nil, call_operator_loc: nil, message_loc: nil, read_name: nil, write_name: nil, operator_loc: nil, value: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def ignore_visibility?; end
  def initialize(source, node_id, location, flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator_loc, value); end
  def inspect; end
  def message; end
  def message_loc; end
  def operator; end
  def operator_loc; end
  def read_name; end
  def receiver; end
  def safe_navigation?; end
  def save_call_operator_loc(repository); end
  def save_message_loc(repository); end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
  def value; end
  def variable_call?; end
  def write_name; end
end
class Prism::CallTargetNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def attribute_write?; end
  def call_operator; end
  def call_operator_loc; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, receiver: nil, call_operator_loc: nil, name: nil, message_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def ignore_visibility?; end
  def initialize(source, node_id, location, flags, receiver, call_operator_loc, name, message_loc); end
  def inspect; end
  def message; end
  def message_loc; end
  def name; end
  def receiver; end
  def safe_navigation?; end
  def save_call_operator_loc(repository); end
  def save_message_loc(repository); end
  def self.type; end
  def type; end
  def variable_call?; end
end
class Prism::CapturePatternNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, value: nil, target: nil, operator_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, value, target, operator_loc); end
  def inspect; end
  def operator; end
  def operator_loc; end
  def save_operator_loc(repository); end
  def self.type; end
  def target; end
  def type; end
  def value; end
end
class Prism::CaseMatchNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def case_keyword; end
  def case_keyword_loc; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def conditions; end
  def consequent; end
  def copy(node_id: nil, location: nil, flags: nil, predicate: nil, conditions: nil, else_clause: nil, case_keyword_loc: nil, end_keyword_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def else_clause; end
  def end_keyword; end
  def end_keyword_loc; end
  def initialize(source, node_id, location, flags, predicate, conditions, else_clause, case_keyword_loc, end_keyword_loc); end
  def inspect; end
  def predicate; end
  def save_case_keyword_loc(repository); end
  def save_end_keyword_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::CaseNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def case_keyword; end
  def case_keyword_loc; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def conditions; end
  def consequent; end
  def copy(node_id: nil, location: nil, flags: nil, predicate: nil, conditions: nil, else_clause: nil, case_keyword_loc: nil, end_keyword_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def else_clause; end
  def end_keyword; end
  def end_keyword_loc; end
  def initialize(source, node_id, location, flags, predicate, conditions, else_clause, case_keyword_loc, end_keyword_loc); end
  def inspect; end
  def predicate; end
  def save_case_keyword_loc(repository); end
  def save_end_keyword_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::ClassNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def body; end
  def child_nodes; end
  def class_keyword; end
  def class_keyword_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def constant_path; end
  def copy(node_id: nil, location: nil, flags: nil, locals: nil, class_keyword_loc: nil, constant_path: nil, inheritance_operator_loc: nil, superclass: nil, body: nil, end_keyword_loc: nil, name: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def end_keyword; end
  def end_keyword_loc; end
  def inheritance_operator; end
  def inheritance_operator_loc; end
  def initialize(source, node_id, location, flags, locals, class_keyword_loc, constant_path, inheritance_operator_loc, superclass, body, end_keyword_loc, name); end
  def inspect; end
  def locals; end
  def name; end
  def save_class_keyword_loc(repository); end
  def save_end_keyword_loc(repository); end
  def save_inheritance_operator_loc(repository); end
  def self.type; end
  def superclass; end
  def type; end
end
class Prism::ClassVariableAndWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil, name_loc: nil, operator_loc: nil, value: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name, name_loc, operator_loc, value); end
  def inspect; end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def save_name_loc(repository); end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::ClassVariableOperatorWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def binary_operator; end
  def binary_operator_loc; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil, name_loc: nil, binary_operator_loc: nil, value: nil, binary_operator: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name, name_loc, binary_operator_loc, value, binary_operator); end
  def inspect; end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def save_binary_operator_loc(repository); end
  def save_name_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::ClassVariableOrWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil, name_loc: nil, operator_loc: nil, value: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name, name_loc, operator_loc, value); end
  def inspect; end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def save_name_loc(repository); end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::ClassVariableReadNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name); end
  def inspect; end
  def name; end
  def self.type; end
  def type; end
end
class Prism::ClassVariableTargetNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name); end
  def inspect; end
  def name; end
  def self.type; end
  def type; end
end
class Prism::ClassVariableWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil, name_loc: nil, value: nil, operator_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name, name_loc, value, operator_loc); end
  def inspect; end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def save_name_loc(repository); end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::ConstantAndWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil, name_loc: nil, operator_loc: nil, value: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name, name_loc, operator_loc, value); end
  def inspect; end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def save_name_loc(repository); end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::ConstantOperatorWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def binary_operator; end
  def binary_operator_loc; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil, name_loc: nil, binary_operator_loc: nil, value: nil, binary_operator: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name, name_loc, binary_operator_loc, value, binary_operator); end
  def inspect; end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def save_binary_operator_loc(repository); end
  def save_name_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::ConstantOrWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil, name_loc: nil, operator_loc: nil, value: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name, name_loc, operator_loc, value); end
  def inspect; end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def save_name_loc(repository); end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::ConstantPathAndWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, target: nil, operator_loc: nil, value: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, target, operator_loc, value); end
  def inspect; end
  def operator; end
  def operator_loc; end
  def save_operator_loc(repository); end
  def self.type; end
  def target; end
  def type; end
  def value; end
end
class Prism::ConstantPathNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, parent: nil, name: nil, delimiter_loc: nil, name_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def delimiter; end
  def delimiter_loc; end
  def full_name; end
  def full_name_parts; end
  def initialize(source, node_id, location, flags, parent, name, delimiter_loc, name_loc); end
  def inspect; end
  def name; end
  def name_loc; end
  def parent; end
  def save_delimiter_loc(repository); end
  def save_name_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::ConstantPathOperatorWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def binary_operator; end
  def binary_operator_loc; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, target: nil, binary_operator_loc: nil, value: nil, binary_operator: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, target, binary_operator_loc, value, binary_operator); end
  def inspect; end
  def operator; end
  def operator_loc; end
  def save_binary_operator_loc(repository); end
  def self.type; end
  def target; end
  def type; end
  def value; end
end
class Prism::ConstantPathOrWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, target: nil, operator_loc: nil, value: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, target, operator_loc, value); end
  def inspect; end
  def operator; end
  def operator_loc; end
  def save_operator_loc(repository); end
  def self.type; end
  def target; end
  def type; end
  def value; end
end
class Prism::ConstantPathTargetNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, parent: nil, name: nil, delimiter_loc: nil, name_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def delimiter; end
  def delimiter_loc; end
  def full_name; end
  def full_name_parts; end
  def initialize(source, node_id, location, flags, parent, name, delimiter_loc, name_loc); end
  def inspect; end
  def name; end
  def name_loc; end
  def parent; end
  def save_delimiter_loc(repository); end
  def save_name_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::ConstantPathWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, target: nil, operator_loc: nil, value: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, target, operator_loc, value); end
  def inspect; end
  def operator; end
  def operator_loc; end
  def save_operator_loc(repository); end
  def self.type; end
  def target; end
  def type; end
  def value; end
end
class Prism::ConstantReadNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def full_name; end
  def full_name_parts; end
  def initialize(source, node_id, location, flags, name); end
  def inspect; end
  def name; end
  def self.type; end
  def type; end
end
class Prism::ConstantTargetNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def full_name; end
  def full_name_parts; end
  def initialize(source, node_id, location, flags, name); end
  def inspect; end
  def name; end
  def self.type; end
  def type; end
end
class Prism::ConstantWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil, name_loc: nil, value: nil, operator_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def full_name; end
  def full_name_parts; end
  def initialize(source, node_id, location, flags, name, name_loc, value, operator_loc); end
  def inspect; end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def save_name_loc(repository); end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::DefNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def body; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil, name_loc: nil, receiver: nil, parameters: nil, body: nil, locals: nil, def_keyword_loc: nil, operator_loc: nil, lparen_loc: nil, rparen_loc: nil, equal_loc: nil, end_keyword_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def def_keyword; end
  def def_keyword_loc; end
  def end_keyword; end
  def end_keyword_loc; end
  def equal; end
  def equal_loc; end
  def initialize(source, node_id, location, flags, name, name_loc, receiver, parameters, body, locals, def_keyword_loc, operator_loc, lparen_loc, rparen_loc, equal_loc, end_keyword_loc); end
  def inspect; end
  def locals; end
  def lparen; end
  def lparen_loc; end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def parameters; end
  def receiver; end
  def rparen; end
  def rparen_loc; end
  def save_def_keyword_loc(repository); end
  def save_end_keyword_loc(repository); end
  def save_equal_loc(repository); end
  def save_lparen_loc(repository); end
  def save_name_loc(repository); end
  def save_operator_loc(repository); end
  def save_rparen_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::DefinedNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, lparen_loc: nil, value: nil, rparen_loc: nil, keyword_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, lparen_loc, value, rparen_loc, keyword_loc); end
  def inspect; end
  def keyword; end
  def keyword_loc; end
  def lparen; end
  def lparen_loc; end
  def rparen; end
  def rparen_loc; end
  def save_keyword_loc(repository); end
  def save_lparen_loc(repository); end
  def save_rparen_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::ElseNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, else_keyword_loc: nil, statements: nil, end_keyword_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def else_keyword; end
  def else_keyword_loc; end
  def end_keyword; end
  def end_keyword_loc; end
  def initialize(source, node_id, location, flags, else_keyword_loc, statements, end_keyword_loc); end
  def inspect; end
  def save_else_keyword_loc(repository); end
  def save_end_keyword_loc(repository); end
  def self.type; end
  def statements; end
  def type; end
end
class Prism::EmbeddedStatementsNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, opening_loc: nil, statements: nil, closing_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, opening_loc, statements, closing_loc); end
  def inspect; end
  def opening; end
  def opening_loc; end
  def save_closing_loc(repository); end
  def save_opening_loc(repository); end
  def self.type; end
  def statements; end
  def type; end
end
class Prism::EmbeddedVariableNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, operator_loc: nil, variable: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, operator_loc, variable); end
  def inspect; end
  def operator; end
  def operator_loc; end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
  def variable; end
end
class Prism::EnsureNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, ensure_keyword_loc: nil, statements: nil, end_keyword_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def end_keyword; end
  def end_keyword_loc; end
  def ensure_keyword; end
  def ensure_keyword_loc; end
  def initialize(source, node_id, location, flags, ensure_keyword_loc, statements, end_keyword_loc); end
  def inspect; end
  def save_end_keyword_loc(repository); end
  def save_ensure_keyword_loc(repository); end
  def self.type; end
  def statements; end
  def type; end
end
class Prism::FalseNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags); end
  def inspect; end
  def self.type; end
  def type; end
end
class Prism::FindPatternNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def constant; end
  def copy(node_id: nil, location: nil, flags: nil, constant: nil, left: nil, requireds: nil, right: nil, opening_loc: nil, closing_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, constant, left, requireds, right, opening_loc, closing_loc); end
  def inspect; end
  def left; end
  def opening; end
  def opening_loc; end
  def requireds; end
  def right; end
  def save_closing_loc(repository); end
  def save_opening_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::FlipFlopNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, left: nil, right: nil, operator_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def exclude_end?; end
  def initialize(source, node_id, location, flags, left, right, operator_loc); end
  def inspect; end
  def left; end
  def operator; end
  def operator_loc; end
  def right; end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::FloatNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, value: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, value); end
  def inspect; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::ForNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def collection; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, index: nil, collection: nil, statements: nil, for_keyword_loc: nil, in_keyword_loc: nil, do_keyword_loc: nil, end_keyword_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def do_keyword; end
  def do_keyword_loc; end
  def end_keyword; end
  def end_keyword_loc; end
  def for_keyword; end
  def for_keyword_loc; end
  def in_keyword; end
  def in_keyword_loc; end
  def index; end
  def initialize(source, node_id, location, flags, index, collection, statements, for_keyword_loc, in_keyword_loc, do_keyword_loc, end_keyword_loc); end
  def inspect; end
  def save_do_keyword_loc(repository); end
  def save_end_keyword_loc(repository); end
  def save_for_keyword_loc(repository); end
  def save_in_keyword_loc(repository); end
  def self.type; end
  def statements; end
  def type; end
end
class Prism::ForwardingArgumentsNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags); end
  def inspect; end
  def self.type; end
  def type; end
end
class Prism::ForwardingParameterNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags); end
  def inspect; end
  def self.type; end
  def type; end
end
class Prism::ForwardingSuperNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def block; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, block: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, block); end
  def inspect; end
  def self.type; end
  def type; end
end
class Prism::GlobalVariableAndWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil, name_loc: nil, operator_loc: nil, value: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name, name_loc, operator_loc, value); end
  def inspect; end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def save_name_loc(repository); end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::GlobalVariableOperatorWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def binary_operator; end
  def binary_operator_loc; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil, name_loc: nil, binary_operator_loc: nil, value: nil, binary_operator: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name, name_loc, binary_operator_loc, value, binary_operator); end
  def inspect; end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def save_binary_operator_loc(repository); end
  def save_name_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::GlobalVariableOrWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil, name_loc: nil, operator_loc: nil, value: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name, name_loc, operator_loc, value); end
  def inspect; end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def save_name_loc(repository); end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::GlobalVariableReadNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name); end
  def inspect; end
  def name; end
  def self.type; end
  def type; end
end
class Prism::GlobalVariableTargetNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name); end
  def inspect; end
  def name; end
  def self.type; end
  def type; end
end
class Prism::GlobalVariableWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil, name_loc: nil, value: nil, operator_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name, name_loc, value, operator_loc); end
  def inspect; end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def save_name_loc(repository); end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::HashNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, opening_loc: nil, elements: nil, closing_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def elements; end
  def initialize(source, node_id, location, flags, opening_loc, elements, closing_loc); end
  def inspect; end
  def opening; end
  def opening_loc; end
  def save_closing_loc(repository); end
  def save_opening_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::HashPatternNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def constant; end
  def copy(node_id: nil, location: nil, flags: nil, constant: nil, elements: nil, rest: nil, opening_loc: nil, closing_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def elements; end
  def initialize(source, node_id, location, flags, constant, elements, rest, opening_loc, closing_loc); end
  def inspect; end
  def opening; end
  def opening_loc; end
  def rest; end
  def save_closing_loc(repository); end
  def save_opening_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::IfNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def consequent; end
  def copy(node_id: nil, location: nil, flags: nil, if_keyword_loc: nil, predicate: nil, then_keyword_loc: nil, statements: nil, subsequent: nil, end_keyword_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def end_keyword; end
  def end_keyword_loc; end
  def if_keyword; end
  def if_keyword_loc; end
  def initialize(source, node_id, location, flags, if_keyword_loc, predicate, then_keyword_loc, statements, subsequent, end_keyword_loc); end
  def inspect; end
  def predicate; end
  def save_end_keyword_loc(repository); end
  def save_if_keyword_loc(repository); end
  def save_then_keyword_loc(repository); end
  def self.type; end
  def statements; end
  def subsequent; end
  def then_keyword; end
  def then_keyword_loc; end
  def type; end
end
class Prism::ImaginaryNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, numeric: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, numeric); end
  def inspect; end
  def numeric; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::ImplicitNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, value: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, value); end
  def inspect; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::ImplicitRestNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags); end
  def inspect; end
  def self.type; end
  def type; end
end
class Prism::InNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, pattern: nil, statements: nil, in_loc: nil, then_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def in; end
  def in_loc; end
  def initialize(source, node_id, location, flags, pattern, statements, in_loc, then_loc); end
  def inspect; end
  def pattern; end
  def save_in_loc(repository); end
  def save_then_loc(repository); end
  def self.type; end
  def statements; end
  def then; end
  def then_loc; end
  def type; end
end
class Prism::IndexAndWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def arguments; end
  def attribute_write?; end
  def block; end
  def call_operator; end
  def call_operator_loc; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, receiver: nil, call_operator_loc: nil, opening_loc: nil, arguments: nil, closing_loc: nil, block: nil, operator_loc: nil, value: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def ignore_visibility?; end
  def initialize(source, node_id, location, flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator_loc, value); end
  def inspect; end
  def opening; end
  def opening_loc; end
  def operator; end
  def operator_loc; end
  def receiver; end
  def safe_navigation?; end
  def save_call_operator_loc(repository); end
  def save_closing_loc(repository); end
  def save_opening_loc(repository); end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
  def value; end
  def variable_call?; end
end
class Prism::IndexOperatorWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def arguments; end
  def attribute_write?; end
  def binary_operator; end
  def binary_operator_loc; end
  def block; end
  def call_operator; end
  def call_operator_loc; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, receiver: nil, call_operator_loc: nil, opening_loc: nil, arguments: nil, closing_loc: nil, block: nil, binary_operator: nil, binary_operator_loc: nil, value: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def ignore_visibility?; end
  def initialize(source, node_id, location, flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, binary_operator, binary_operator_loc, value); end
  def inspect; end
  def opening; end
  def opening_loc; end
  def operator; end
  def operator_loc; end
  def receiver; end
  def safe_navigation?; end
  def save_binary_operator_loc(repository); end
  def save_call_operator_loc(repository); end
  def save_closing_loc(repository); end
  def save_opening_loc(repository); end
  def self.type; end
  def type; end
  def value; end
  def variable_call?; end
end
class Prism::IndexOrWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def arguments; end
  def attribute_write?; end
  def block; end
  def call_operator; end
  def call_operator_loc; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, receiver: nil, call_operator_loc: nil, opening_loc: nil, arguments: nil, closing_loc: nil, block: nil, operator_loc: nil, value: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def ignore_visibility?; end
  def initialize(source, node_id, location, flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator_loc, value); end
  def inspect; end
  def opening; end
  def opening_loc; end
  def operator; end
  def operator_loc; end
  def receiver; end
  def safe_navigation?; end
  def save_call_operator_loc(repository); end
  def save_closing_loc(repository); end
  def save_opening_loc(repository); end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
  def value; end
  def variable_call?; end
end
class Prism::IndexTargetNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def arguments; end
  def attribute_write?; end
  def block; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, receiver: nil, opening_loc: nil, arguments: nil, closing_loc: nil, block: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def ignore_visibility?; end
  def initialize(source, node_id, location, flags, receiver, opening_loc, arguments, closing_loc, block); end
  def inspect; end
  def opening; end
  def opening_loc; end
  def receiver; end
  def safe_navigation?; end
  def save_closing_loc(repository); end
  def save_opening_loc(repository); end
  def self.type; end
  def type; end
  def variable_call?; end
end
class Prism::InstanceVariableAndWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil, name_loc: nil, operator_loc: nil, value: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name, name_loc, operator_loc, value); end
  def inspect; end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def save_name_loc(repository); end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::InstanceVariableOperatorWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def binary_operator; end
  def binary_operator_loc; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil, name_loc: nil, binary_operator_loc: nil, value: nil, binary_operator: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name, name_loc, binary_operator_loc, value, binary_operator); end
  def inspect; end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def save_binary_operator_loc(repository); end
  def save_name_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::InstanceVariableOrWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil, name_loc: nil, operator_loc: nil, value: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name, name_loc, operator_loc, value); end
  def inspect; end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def save_name_loc(repository); end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::InstanceVariableReadNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name); end
  def inspect; end
  def name; end
  def self.type; end
  def type; end
end
class Prism::InstanceVariableTargetNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name); end
  def inspect; end
  def name; end
  def self.type; end
  def type; end
end
class Prism::InstanceVariableWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil, name_loc: nil, value: nil, operator_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name, name_loc, value, operator_loc); end
  def inspect; end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def save_name_loc(repository); end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::IntegerNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def binary?; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, value: nil); end
  def decimal?; end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def hexadecimal?; end
  def initialize(source, node_id, location, flags, value); end
  def inspect; end
  def octal?; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::InterpolatedMatchLastLineNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def ascii_8bit?; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, opening_loc: nil, parts: nil, closing_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def euc_jp?; end
  def extended?; end
  def forced_binary_encoding?; end
  def forced_us_ascii_encoding?; end
  def forced_utf8_encoding?; end
  def ignore_case?; end
  def initialize(source, node_id, location, flags, opening_loc, parts, closing_loc); end
  def inspect; end
  def multi_line?; end
  def once?; end
  def opening; end
  def opening_loc; end
  def parts; end
  def save_closing_loc(repository); end
  def save_opening_loc(repository); end
  def self.type; end
  def type; end
  def utf_8?; end
  def windows_31j?; end
  include Prism::RegularExpressionOptions
end
class Prism::InterpolatedRegularExpressionNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def ascii_8bit?; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, opening_loc: nil, parts: nil, closing_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def euc_jp?; end
  def extended?; end
  def forced_binary_encoding?; end
  def forced_us_ascii_encoding?; end
  def forced_utf8_encoding?; end
  def ignore_case?; end
  def initialize(source, node_id, location, flags, opening_loc, parts, closing_loc); end
  def inspect; end
  def multi_line?; end
  def once?; end
  def opening; end
  def opening_loc; end
  def parts; end
  def save_closing_loc(repository); end
  def save_opening_loc(repository); end
  def self.type; end
  def type; end
  def utf_8?; end
  def windows_31j?; end
  include Prism::RegularExpressionOptions
end
class Prism::InterpolatedStringNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, opening_loc: nil, parts: nil, closing_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def frozen?; end
  def initialize(source, node_id, location, flags, opening_loc, parts, closing_loc); end
  def inspect; end
  def mutable?; end
  def opening; end
  def opening_loc; end
  def parts; end
  def save_closing_loc(repository); end
  def save_opening_loc(repository); end
  def self.type; end
  def type; end
  include Prism::HeredocQuery
end
class Prism::InterpolatedSymbolNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, opening_loc: nil, parts: nil, closing_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, opening_loc, parts, closing_loc); end
  def inspect; end
  def opening; end
  def opening_loc; end
  def parts; end
  def save_closing_loc(repository); end
  def save_opening_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::InterpolatedXStringNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, opening_loc: nil, parts: nil, closing_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, opening_loc, parts, closing_loc); end
  def inspect; end
  def opening; end
  def opening_loc; end
  def parts; end
  def save_closing_loc(repository); end
  def save_opening_loc(repository); end
  def self.type; end
  def type; end
  include Prism::HeredocQuery
end
class Prism::ItLocalVariableReadNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags); end
  def inspect; end
  def self.type; end
  def type; end
end
class Prism::ItParametersNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags); end
  def inspect; end
  def self.type; end
  def type; end
end
class Prism::KeywordHashNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, elements: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def elements; end
  def initialize(source, node_id, location, flags, elements); end
  def inspect; end
  def self.type; end
  def symbol_keys?; end
  def type; end
end
class Prism::KeywordRestParameterNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil, name_loc: nil, operator_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name, name_loc, operator_loc); end
  def inspect; end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def repeated_parameter?; end
  def save_name_loc(repository); end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::LambdaNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def body; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, locals: nil, operator_loc: nil, opening_loc: nil, closing_loc: nil, parameters: nil, body: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, locals, operator_loc, opening_loc, closing_loc, parameters, body); end
  def inspect; end
  def locals; end
  def opening; end
  def opening_loc; end
  def operator; end
  def operator_loc; end
  def parameters; end
  def save_closing_loc(repository); end
  def save_opening_loc(repository); end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::LocalVariableAndWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name_loc: nil, operator_loc: nil, value: nil, name: nil, depth: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def depth; end
  def initialize(source, node_id, location, flags, name_loc, operator_loc, value, name, depth); end
  def inspect; end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def save_name_loc(repository); end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::LocalVariableOperatorWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def binary_operator; end
  def binary_operator_loc; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name_loc: nil, binary_operator_loc: nil, value: nil, name: nil, binary_operator: nil, depth: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def depth; end
  def initialize(source, node_id, location, flags, name_loc, binary_operator_loc, value, name, binary_operator, depth); end
  def inspect; end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def save_binary_operator_loc(repository); end
  def save_name_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::LocalVariableOrWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name_loc: nil, operator_loc: nil, value: nil, name: nil, depth: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def depth; end
  def initialize(source, node_id, location, flags, name_loc, operator_loc, value, name, depth); end
  def inspect; end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def save_name_loc(repository); end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::LocalVariableReadNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil, depth: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def depth; end
  def initialize(source, node_id, location, flags, name, depth); end
  def inspect; end
  def name; end
  def self.type; end
  def type; end
end
class Prism::LocalVariableTargetNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil, depth: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def depth; end
  def initialize(source, node_id, location, flags, name, depth); end
  def inspect; end
  def name; end
  def self.type; end
  def type; end
end
class Prism::LocalVariableWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil, depth: nil, name_loc: nil, value: nil, operator_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def depth; end
  def initialize(source, node_id, location, flags, name, depth, name_loc, value, operator_loc); end
  def inspect; end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def save_name_loc(repository); end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::MatchLastLineNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def ascii_8bit?; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def content; end
  def content_loc; end
  def copy(node_id: nil, location: nil, flags: nil, opening_loc: nil, content_loc: nil, closing_loc: nil, unescaped: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def euc_jp?; end
  def extended?; end
  def forced_binary_encoding?; end
  def forced_us_ascii_encoding?; end
  def forced_utf8_encoding?; end
  def ignore_case?; end
  def initialize(source, node_id, location, flags, opening_loc, content_loc, closing_loc, unescaped); end
  def inspect; end
  def multi_line?; end
  def once?; end
  def opening; end
  def opening_loc; end
  def save_closing_loc(repository); end
  def save_content_loc(repository); end
  def save_opening_loc(repository); end
  def self.type; end
  def type; end
  def unescaped; end
  def utf_8?; end
  def windows_31j?; end
  include Prism::RegularExpressionOptions
end
class Prism::MatchPredicateNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, value: nil, pattern: nil, operator_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, value, pattern, operator_loc); end
  def inspect; end
  def operator; end
  def operator_loc; end
  def pattern; end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::MatchRequiredNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, value: nil, pattern: nil, operator_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, value, pattern, operator_loc); end
  def inspect; end
  def operator; end
  def operator_loc; end
  def pattern; end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::MatchWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def call; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, call: nil, targets: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, call, targets); end
  def inspect; end
  def self.type; end
  def targets; end
  def type; end
end
class Prism::MissingNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags); end
  def inspect; end
  def self.type; end
  def type; end
end
class Prism::ModuleNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def body; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def constant_path; end
  def copy(node_id: nil, location: nil, flags: nil, locals: nil, module_keyword_loc: nil, constant_path: nil, body: nil, end_keyword_loc: nil, name: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def end_keyword; end
  def end_keyword_loc; end
  def initialize(source, node_id, location, flags, locals, module_keyword_loc, constant_path, body, end_keyword_loc, name); end
  def inspect; end
  def locals; end
  def module_keyword; end
  def module_keyword_loc; end
  def name; end
  def save_end_keyword_loc(repository); end
  def save_module_keyword_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::MultiTargetNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, lefts: nil, rest: nil, rights: nil, lparen_loc: nil, rparen_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, lefts, rest, rights, lparen_loc, rparen_loc); end
  def inspect; end
  def lefts; end
  def lparen; end
  def lparen_loc; end
  def rest; end
  def rights; end
  def rparen; end
  def rparen_loc; end
  def save_lparen_loc(repository); end
  def save_rparen_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::MultiWriteNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, lefts: nil, rest: nil, rights: nil, lparen_loc: nil, rparen_loc: nil, operator_loc: nil, value: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, lefts, rest, rights, lparen_loc, rparen_loc, operator_loc, value); end
  def inspect; end
  def lefts; end
  def lparen; end
  def lparen_loc; end
  def operator; end
  def operator_loc; end
  def rest; end
  def rights; end
  def rparen; end
  def rparen_loc; end
  def save_lparen_loc(repository); end
  def save_operator_loc(repository); end
  def save_rparen_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::NextNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def arguments; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, arguments: nil, keyword_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, arguments, keyword_loc); end
  def inspect; end
  def keyword; end
  def keyword_loc; end
  def save_keyword_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::NilNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags); end
  def inspect; end
  def self.type; end
  def type; end
end
class Prism::NoKeywordsParameterNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, operator_loc: nil, keyword_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, operator_loc, keyword_loc); end
  def inspect; end
  def keyword; end
  def keyword_loc; end
  def operator; end
  def operator_loc; end
  def save_keyword_loc(repository); end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::NumberedParametersNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, maximum: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, maximum); end
  def inspect; end
  def maximum; end
  def self.type; end
  def type; end
end
class Prism::NumberedReferenceReadNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, number: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, number); end
  def inspect; end
  def number; end
  def self.type; end
  def type; end
end
class Prism::OptionalKeywordParameterNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil, name_loc: nil, value: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name, name_loc, value); end
  def inspect; end
  def name; end
  def name_loc; end
  def repeated_parameter?; end
  def save_name_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::OptionalParameterNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil, name_loc: nil, operator_loc: nil, value: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name, name_loc, operator_loc, value); end
  def inspect; end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def repeated_parameter?; end
  def save_name_loc(repository); end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::OrNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, left: nil, right: nil, operator_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, left, right, operator_loc); end
  def inspect; end
  def left; end
  def operator; end
  def operator_loc; end
  def right; end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::ParametersNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def block; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, requireds: nil, optionals: nil, rest: nil, posts: nil, keywords: nil, keyword_rest: nil, block: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, requireds, optionals, rest, posts, keywords, keyword_rest, block); end
  def inspect; end
  def keyword_rest; end
  def keywords; end
  def optionals; end
  def posts; end
  def requireds; end
  def rest; end
  def self.type; end
  def signature; end
  def type; end
end
class Prism::ParenthesesNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def body; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, body: nil, opening_loc: nil, closing_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, body, opening_loc, closing_loc); end
  def inspect; end
  def multiple_statements?; end
  def opening; end
  def opening_loc; end
  def save_closing_loc(repository); end
  def save_opening_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::PinnedExpressionNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, expression: nil, operator_loc: nil, lparen_loc: nil, rparen_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def expression; end
  def initialize(source, node_id, location, flags, expression, operator_loc, lparen_loc, rparen_loc); end
  def inspect; end
  def lparen; end
  def lparen_loc; end
  def operator; end
  def operator_loc; end
  def rparen; end
  def rparen_loc; end
  def save_lparen_loc(repository); end
  def save_operator_loc(repository); end
  def save_rparen_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::PinnedVariableNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, variable: nil, operator_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, variable, operator_loc); end
  def inspect; end
  def operator; end
  def operator_loc; end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
  def variable; end
end
class Prism::PostExecutionNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, statements: nil, keyword_loc: nil, opening_loc: nil, closing_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, statements, keyword_loc, opening_loc, closing_loc); end
  def inspect; end
  def keyword; end
  def keyword_loc; end
  def opening; end
  def opening_loc; end
  def save_closing_loc(repository); end
  def save_keyword_loc(repository); end
  def save_opening_loc(repository); end
  def self.type; end
  def statements; end
  def type; end
end
class Prism::PreExecutionNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, statements: nil, keyword_loc: nil, opening_loc: nil, closing_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, statements, keyword_loc, opening_loc, closing_loc); end
  def inspect; end
  def keyword; end
  def keyword_loc; end
  def opening; end
  def opening_loc; end
  def save_closing_loc(repository); end
  def save_keyword_loc(repository); end
  def save_opening_loc(repository); end
  def self.type; end
  def statements; end
  def type; end
end
class Prism::ProgramNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, locals: nil, statements: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, locals, statements); end
  def inspect; end
  def locals; end
  def self.type; end
  def statements; end
  def type; end
end
class Prism::RangeNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, left: nil, right: nil, operator_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def exclude_end?; end
  def initialize(source, node_id, location, flags, left, right, operator_loc); end
  def inspect; end
  def left; end
  def operator; end
  def operator_loc; end
  def right; end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::RationalNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def binary?; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, numerator: nil, denominator: nil); end
  def decimal?; end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def denominator; end
  def hexadecimal?; end
  def initialize(source, node_id, location, flags, numerator, denominator); end
  def inspect; end
  def numerator; end
  def numeric; end
  def octal?; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::RedoNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags); end
  def inspect; end
  def self.type; end
  def type; end
end
class Prism::RegularExpressionNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def ascii_8bit?; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def content; end
  def content_loc; end
  def copy(node_id: nil, location: nil, flags: nil, opening_loc: nil, content_loc: nil, closing_loc: nil, unescaped: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def euc_jp?; end
  def extended?; end
  def forced_binary_encoding?; end
  def forced_us_ascii_encoding?; end
  def forced_utf8_encoding?; end
  def ignore_case?; end
  def initialize(source, node_id, location, flags, opening_loc, content_loc, closing_loc, unescaped); end
  def inspect; end
  def multi_line?; end
  def once?; end
  def opening; end
  def opening_loc; end
  def save_closing_loc(repository); end
  def save_content_loc(repository); end
  def save_opening_loc(repository); end
  def self.type; end
  def type; end
  def unescaped; end
  def utf_8?; end
  def windows_31j?; end
  include Prism::RegularExpressionOptions
end
class Prism::RequiredKeywordParameterNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil, name_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name, name_loc); end
  def inspect; end
  def name; end
  def name_loc; end
  def repeated_parameter?; end
  def save_name_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::RequiredParameterNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name); end
  def inspect; end
  def name; end
  def repeated_parameter?; end
  def self.type; end
  def type; end
end
class Prism::RescueModifierNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, expression: nil, keyword_loc: nil, rescue_expression: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def expression; end
  def initialize(source, node_id, location, flags, expression, keyword_loc, rescue_expression); end
  def inspect; end
  def keyword; end
  def keyword_loc; end
  def rescue_expression; end
  def save_keyword_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::RescueNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def consequent; end
  def copy(node_id: nil, location: nil, flags: nil, keyword_loc: nil, exceptions: nil, operator_loc: nil, reference: nil, then_keyword_loc: nil, statements: nil, subsequent: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def exceptions; end
  def initialize(source, node_id, location, flags, keyword_loc, exceptions, operator_loc, reference, then_keyword_loc, statements, subsequent); end
  def inspect; end
  def keyword; end
  def keyword_loc; end
  def operator; end
  def operator_loc; end
  def reference; end
  def save_keyword_loc(repository); end
  def save_operator_loc(repository); end
  def save_then_keyword_loc(repository); end
  def self.type; end
  def statements; end
  def subsequent; end
  def then_keyword; end
  def then_keyword_loc; end
  def type; end
end
class Prism::RestParameterNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, name: nil, name_loc: nil, operator_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, name, name_loc, operator_loc); end
  def inspect; end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def repeated_parameter?; end
  def save_name_loc(repository); end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::RetryNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags); end
  def inspect; end
  def self.type; end
  def type; end
end
class Prism::ReturnNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def arguments; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, keyword_loc: nil, arguments: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, keyword_loc, arguments); end
  def inspect; end
  def keyword; end
  def keyword_loc; end
  def save_keyword_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::SelfNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags); end
  def inspect; end
  def self.type; end
  def type; end
end
class Prism::ShareableConstantNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, write: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def experimental_copy?; end
  def experimental_everything?; end
  def initialize(source, node_id, location, flags, write); end
  def inspect; end
  def literal?; end
  def self.type; end
  def type; end
  def write; end
end
class Prism::SingletonClassNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def body; end
  def child_nodes; end
  def class_keyword; end
  def class_keyword_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, locals: nil, class_keyword_loc: nil, operator_loc: nil, expression: nil, body: nil, end_keyword_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def end_keyword; end
  def end_keyword_loc; end
  def expression; end
  def initialize(source, node_id, location, flags, locals, class_keyword_loc, operator_loc, expression, body, end_keyword_loc); end
  def inspect; end
  def locals; end
  def operator; end
  def operator_loc; end
  def save_class_keyword_loc(repository); end
  def save_end_keyword_loc(repository); end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::SourceEncodingNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags); end
  def inspect; end
  def self.type; end
  def type; end
end
class Prism::SourceFileNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, filepath: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def filepath; end
  def forced_binary_encoding?; end
  def forced_utf8_encoding?; end
  def frozen?; end
  def initialize(source, node_id, location, flags, filepath); end
  def inspect; end
  def mutable?; end
  def self.type; end
  def type; end
end
class Prism::SourceLineNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags); end
  def inspect; end
  def self.type; end
  def type; end
end
class Prism::SplatNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, operator_loc: nil, expression: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def expression; end
  def initialize(source, node_id, location, flags, operator_loc, expression); end
  def inspect; end
  def operator; end
  def operator_loc; end
  def save_operator_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::StatementsNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def body; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, body: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, body); end
  def inspect; end
  def self.type; end
  def type; end
end
class Prism::StringNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def content; end
  def content_loc; end
  def copy(node_id: nil, location: nil, flags: nil, opening_loc: nil, content_loc: nil, closing_loc: nil, unescaped: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def forced_binary_encoding?; end
  def forced_utf8_encoding?; end
  def frozen?; end
  def initialize(source, node_id, location, flags, opening_loc, content_loc, closing_loc, unescaped); end
  def inspect; end
  def mutable?; end
  def opening; end
  def opening_loc; end
  def save_closing_loc(repository); end
  def save_content_loc(repository); end
  def save_opening_loc(repository); end
  def self.type; end
  def to_interpolated; end
  def type; end
  def unescaped; end
  include Prism::HeredocQuery
end
class Prism::SuperNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def arguments; end
  def block; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, keyword_loc: nil, lparen_loc: nil, arguments: nil, rparen_loc: nil, block: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, keyword_loc, lparen_loc, arguments, rparen_loc, block); end
  def inspect; end
  def keyword; end
  def keyword_loc; end
  def lparen; end
  def lparen_loc; end
  def rparen; end
  def rparen_loc; end
  def save_keyword_loc(repository); end
  def save_lparen_loc(repository); end
  def save_rparen_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::SymbolNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, opening_loc: nil, value_loc: nil, closing_loc: nil, unescaped: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def forced_binary_encoding?; end
  def forced_us_ascii_encoding?; end
  def forced_utf8_encoding?; end
  def initialize(source, node_id, location, flags, opening_loc, value_loc, closing_loc, unescaped); end
  def inspect; end
  def opening; end
  def opening_loc; end
  def save_closing_loc(repository); end
  def save_opening_loc(repository); end
  def save_value_loc(repository); end
  def self.type; end
  def type; end
  def unescaped; end
  def value; end
  def value_loc; end
end
class Prism::TrueNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags); end
  def inspect; end
  def self.type; end
  def type; end
end
class Prism::UndefNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, names: nil, keyword_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, names, keyword_loc); end
  def inspect; end
  def keyword; end
  def keyword_loc; end
  def names; end
  def save_keyword_loc(repository); end
  def self.type; end
  def type; end
end
class Prism::UnlessNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def consequent; end
  def copy(node_id: nil, location: nil, flags: nil, keyword_loc: nil, predicate: nil, then_keyword_loc: nil, statements: nil, else_clause: nil, end_keyword_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def else_clause; end
  def end_keyword; end
  def end_keyword_loc; end
  def initialize(source, node_id, location, flags, keyword_loc, predicate, then_keyword_loc, statements, else_clause, end_keyword_loc); end
  def inspect; end
  def keyword; end
  def keyword_loc; end
  def predicate; end
  def save_end_keyword_loc(repository); end
  def save_keyword_loc(repository); end
  def save_then_keyword_loc(repository); end
  def self.type; end
  def statements; end
  def then_keyword; end
  def then_keyword_loc; end
  def type; end
end
class Prism::UntilNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def begin_modifier?; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, keyword_loc: nil, do_keyword_loc: nil, closing_loc: nil, predicate: nil, statements: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def do_keyword; end
  def do_keyword_loc; end
  def initialize(source, node_id, location, flags, keyword_loc, do_keyword_loc, closing_loc, predicate, statements); end
  def inspect; end
  def keyword; end
  def keyword_loc; end
  def predicate; end
  def save_closing_loc(repository); end
  def save_do_keyword_loc(repository); end
  def save_keyword_loc(repository); end
  def self.type; end
  def statements; end
  def type; end
end
class Prism::WhenNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def conditions; end
  def copy(node_id: nil, location: nil, flags: nil, keyword_loc: nil, conditions: nil, then_keyword_loc: nil, statements: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, keyword_loc, conditions, then_keyword_loc, statements); end
  def inspect; end
  def keyword; end
  def keyword_loc; end
  def save_keyword_loc(repository); end
  def save_then_keyword_loc(repository); end
  def self.type; end
  def statements; end
  def then_keyword; end
  def then_keyword_loc; end
  def type; end
end
class Prism::WhileNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def begin_modifier?; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, keyword_loc: nil, do_keyword_loc: nil, closing_loc: nil, predicate: nil, statements: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def do_keyword; end
  def do_keyword_loc; end
  def initialize(source, node_id, location, flags, keyword_loc, do_keyword_loc, closing_loc, predicate, statements); end
  def inspect; end
  def keyword; end
  def keyword_loc; end
  def predicate; end
  def save_closing_loc(repository); end
  def save_do_keyword_loc(repository); end
  def save_keyword_loc(repository); end
  def self.type; end
  def statements; end
  def type; end
end
class Prism::XStringNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def content; end
  def content_loc; end
  def copy(node_id: nil, location: nil, flags: nil, opening_loc: nil, content_loc: nil, closing_loc: nil, unescaped: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def forced_binary_encoding?; end
  def forced_utf8_encoding?; end
  def initialize(source, node_id, location, flags, opening_loc, content_loc, closing_loc, unescaped); end
  def inspect; end
  def opening; end
  def opening_loc; end
  def save_closing_loc(repository); end
  def save_content_loc(repository); end
  def save_opening_loc(repository); end
  def self.type; end
  def to_interpolated; end
  def type; end
  def unescaped; end
  include Prism::HeredocQuery
end
class Prism::YieldNode < Prism::Node
  def ===(other); end
  def accept(visitor); end
  def arguments; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(node_id: nil, location: nil, flags: nil, keyword_loc: nil, lparen_loc: nil, arguments: nil, rparen_loc: nil); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(source, node_id, location, flags, keyword_loc, lparen_loc, arguments, rparen_loc); end
  def inspect; end
  def keyword; end
  def keyword_loc; end
  def lparen; end
  def lparen_loc; end
  def rparen; end
  def rparen_loc; end
  def save_keyword_loc(repository); end
  def save_lparen_loc(repository); end
  def save_rparen_loc(repository); end
  def self.type; end
  def type; end
end
module Prism::ArgumentsNodeFlags
end
module Prism::ArrayNodeFlags
end
module Prism::CallNodeFlags
end
module Prism::EncodingFlags
end
module Prism::IntegerBaseFlags
end
module Prism::InterpolatedStringNodeFlags
end
module Prism::KeywordHashNodeFlags
end
module Prism::LoopFlags
end
module Prism::ParameterFlags
end
module Prism::ParenthesesNodeFlags
end
module Prism::RangeFlags
end
module Prism::RegularExpressionFlags
end
module Prism::ShareableConstantNodeFlags
end
module Prism::StringFlags
end
module Prism::SymbolFlags
end
module Prism::NodeFlags
end
module Prism::RegularExpressionOptions
  def options; end
end
module Prism::HeredocQuery
  def heredoc?; end
end
class Prism::ConstantPathNode::DynamicPartsInConstantPathError < StandardError
end
class Prism::ConstantPathNode::MissingNodesInConstantPathError < StandardError
end
class Prism::Source
  def character_column(byte_offset); end
  def character_offset(byte_offset); end
  def code_units_cache(encoding); end
  def code_units_column(byte_offset, encoding); end
  def code_units_offset(byte_offset, encoding); end
  def column(byte_offset); end
  def deep_freeze; end
  def encoding; end
  def find_line(byte_offset); end
  def initialize(source, start_line = nil, offsets = nil); end
  def line(byte_offset); end
  def line_end(byte_offset); end
  def line_start(byte_offset); end
  def lines; end
  def offsets; end
  def replace_offsets(offsets); end
  def replace_start_line(start_line); end
  def self.for(source, start_line = nil, offsets = nil); end
  def slice(byte_offset, length); end
  def source; end
  def start_line; end
end
class Prism::CodeUnitsCache
  def [](byte_offset); end
  def initialize(source, encoding); end
end
class Prism::CodeUnitsCache::UTF16Counter
  def count(byte_offset, byte_length); end
  def initialize(source, encoding); end
end
class Prism::CodeUnitsCache::LengthCounter
  def count(byte_offset, byte_length); end
  def initialize(source, encoding); end
end
class Prism::ASCIISource < Prism::Source
  def character_column(byte_offset); end
  def character_offset(byte_offset); end
  def code_units_cache(encoding); end
  def code_units_column(byte_offset, encoding); end
  def code_units_offset(byte_offset, encoding); end
end
class Prism::Location
  def ==(other); end
  def adjoin(string); end
  def cached_end_code_units_column(cache); end
  def cached_end_code_units_offset(cache); end
  def cached_start_code_units_column(cache); end
  def cached_start_code_units_offset(cache); end
  def chop; end
  def comments; end
  def copy(source: nil, start_offset: nil, length: nil); end
  def deconstruct_keys(keys); end
  def end_character_column; end
  def end_character_offset; end
  def end_code_units_column(encoding = nil); end
  def end_code_units_offset(encoding = nil); end
  def end_column; end
  def end_line; end
  def end_offset; end
  def initialize(source, start_offset, length); end
  def inspect; end
  def join(other); end
  def leading_comment(comment); end
  def leading_comments; end
  def length; end
  def pretty_print(q); end
  def slice; end
  def slice_lines; end
  def source; end
  def source_lines; end
  def start_character_column; end
  def start_character_offset; end
  def start_code_units_column(encoding = nil); end
  def start_code_units_offset(encoding = nil); end
  def start_column; end
  def start_line; end
  def start_line_slice; end
  def start_offset; end
  def trailing_comment(comment); end
  def trailing_comments; end
end
class Prism::Comment
  def deconstruct_keys(keys); end
  def initialize(location); end
  def location; end
  def slice; end
end
class Prism::InlineComment < Prism::Comment
  def inspect; end
  def trailing?; end
end
class Prism::EmbDocComment < Prism::Comment
  def inspect; end
  def trailing?; end
end
class Prism::MagicComment
  def deconstruct_keys(keys); end
  def initialize(key_loc, value_loc); end
  def inspect; end
  def key; end
  def key_loc; end
  def value; end
  def value_loc; end
end
class Prism::ParseError
  def deconstruct_keys(keys); end
  def initialize(type, message, location, level); end
  def inspect; end
  def level; end
  def location; end
  def message; end
  def type; end
end
class Prism::ParseWarning
  def deconstruct_keys(keys); end
  def initialize(type, message, location, level); end
  def inspect; end
  def level; end
  def location; end
  def message; end
  def type; end
end
class Prism::Result
  def code_units_cache(encoding); end
  def comments; end
  def data_loc; end
  def deconstruct_keys(keys); end
  def encoding; end
  def errors; end
  def failure?; end
  def initialize(comments, magic_comments, data_loc, errors, warnings, source); end
  def magic_comments; end
  def source; end
  def success?; end
  def warnings; end
end
class Prism::ParseResult < Prism::Result
  def attach_comments!; end
  def deconstruct_keys(keys); end
  def errors_format; end
  def initialize(value, comments, magic_comments, data_loc, errors, warnings, source); end
  def mark_newlines!; end
  def value; end
end
class Prism::LexResult < Prism::Result
  def deconstruct_keys(keys); end
  def initialize(value, comments, magic_comments, data_loc, errors, warnings, source); end
  def value; end
end
class Prism::ParseLexResult < Prism::Result
  def deconstruct_keys(keys); end
  def initialize(value, comments, magic_comments, data_loc, errors, warnings, source); end
  def value; end
end
class Prism::Token
  def ==(other); end
  def deconstruct_keys(keys); end
  def deep_freeze; end
  def initialize(source, type, value, location); end
  def inspect; end
  def location; end
  def pretty_print(q); end
  def source; end
  def type; end
  def value; end
end
class Prism::Scope
  def forwarding; end
  def initialize(locals, forwarding); end
  def locals; end
end
class Prism::StringQuery
  def constant?; end
  def initialize(string); end
  def local?; end
  def method_name?; end
  def self.constant?(arg0); end
  def self.local?(arg0); end
  def self.method_name?(arg0); end
  def string; end
end
module Prism::Pack
  def self.parse(arg0, arg1, arg2); end
end
class Prism::Pack::Directive
  def describe; end
  def endian; end
  def initialize(version, variant, source, type, signed, endian, size, length_type, length); end
  def length; end
  def length_type; end
  def signed; end
  def size; end
  def source; end
  def type; end
  def variant; end
  def version; end
end
class Prism::Pack::Format
  def describe; end
  def directives; end
  def encoding; end
  def initialize(directives, encoding); end
end
class Prism::BasicVisitor
  def visit(node); end
  def visit_all(nodes); end
  def visit_child_nodes(node); end
end
class Prism::Visitor < Prism::BasicVisitor
  def visit_alias_global_variable_node(node); end
  def visit_alias_method_node(node); end
  def visit_alternation_pattern_node(node); end
  def visit_and_node(node); end
  def visit_arguments_node(node); end
  def visit_array_node(node); end
  def visit_array_pattern_node(node); end
  def visit_assoc_node(node); end
  def visit_assoc_splat_node(node); end
  def visit_back_reference_read_node(node); end
  def visit_begin_node(node); end
  def visit_block_argument_node(node); end
  def visit_block_local_variable_node(node); end
  def visit_block_node(node); end
  def visit_block_parameter_node(node); end
  def visit_block_parameters_node(node); end
  def visit_break_node(node); end
  def visit_call_and_write_node(node); end
  def visit_call_node(node); end
  def visit_call_operator_write_node(node); end
  def visit_call_or_write_node(node); end
  def visit_call_target_node(node); end
  def visit_capture_pattern_node(node); end
  def visit_case_match_node(node); end
  def visit_case_node(node); end
  def visit_class_node(node); end
  def visit_class_variable_and_write_node(node); end
  def visit_class_variable_operator_write_node(node); end
  def visit_class_variable_or_write_node(node); end
  def visit_class_variable_read_node(node); end
  def visit_class_variable_target_node(node); end
  def visit_class_variable_write_node(node); end
  def visit_constant_and_write_node(node); end
  def visit_constant_operator_write_node(node); end
  def visit_constant_or_write_node(node); end
  def visit_constant_path_and_write_node(node); end
  def visit_constant_path_node(node); end
  def visit_constant_path_operator_write_node(node); end
  def visit_constant_path_or_write_node(node); end
  def visit_constant_path_target_node(node); end
  def visit_constant_path_write_node(node); end
  def visit_constant_read_node(node); end
  def visit_constant_target_node(node); end
  def visit_constant_write_node(node); end
  def visit_def_node(node); end
  def visit_defined_node(node); end
  def visit_else_node(node); end
  def visit_embedded_statements_node(node); end
  def visit_embedded_variable_node(node); end
  def visit_ensure_node(node); end
  def visit_false_node(node); end
  def visit_find_pattern_node(node); end
  def visit_flip_flop_node(node); end
  def visit_float_node(node); end
  def visit_for_node(node); end
  def visit_forwarding_arguments_node(node); end
  def visit_forwarding_parameter_node(node); end
  def visit_forwarding_super_node(node); end
  def visit_global_variable_and_write_node(node); end
  def visit_global_variable_operator_write_node(node); end
  def visit_global_variable_or_write_node(node); end
  def visit_global_variable_read_node(node); end
  def visit_global_variable_target_node(node); end
  def visit_global_variable_write_node(node); end
  def visit_hash_node(node); end
  def visit_hash_pattern_node(node); end
  def visit_if_node(node); end
  def visit_imaginary_node(node); end
  def visit_implicit_node(node); end
  def visit_implicit_rest_node(node); end
  def visit_in_node(node); end
  def visit_index_and_write_node(node); end
  def visit_index_operator_write_node(node); end
  def visit_index_or_write_node(node); end
  def visit_index_target_node(node); end
  def visit_instance_variable_and_write_node(node); end
  def visit_instance_variable_operator_write_node(node); end
  def visit_instance_variable_or_write_node(node); end
  def visit_instance_variable_read_node(node); end
  def visit_instance_variable_target_node(node); end
  def visit_instance_variable_write_node(node); end
  def visit_integer_node(node); end
  def visit_interpolated_match_last_line_node(node); end
  def visit_interpolated_regular_expression_node(node); end
  def visit_interpolated_string_node(node); end
  def visit_interpolated_symbol_node(node); end
  def visit_interpolated_x_string_node(node); end
  def visit_it_local_variable_read_node(node); end
  def visit_it_parameters_node(node); end
  def visit_keyword_hash_node(node); end
  def visit_keyword_rest_parameter_node(node); end
  def visit_lambda_node(node); end
  def visit_local_variable_and_write_node(node); end
  def visit_local_variable_operator_write_node(node); end
  def visit_local_variable_or_write_node(node); end
  def visit_local_variable_read_node(node); end
  def visit_local_variable_target_node(node); end
  def visit_local_variable_write_node(node); end
  def visit_match_last_line_node(node); end
  def visit_match_predicate_node(node); end
  def visit_match_required_node(node); end
  def visit_match_write_node(node); end
  def visit_missing_node(node); end
  def visit_module_node(node); end
  def visit_multi_target_node(node); end
  def visit_multi_write_node(node); end
  def visit_next_node(node); end
  def visit_nil_node(node); end
  def visit_no_keywords_parameter_node(node); end
  def visit_numbered_parameters_node(node); end
  def visit_numbered_reference_read_node(node); end
  def visit_optional_keyword_parameter_node(node); end
  def visit_optional_parameter_node(node); end
  def visit_or_node(node); end
  def visit_parameters_node(node); end
  def visit_parentheses_node(node); end
  def visit_pinned_expression_node(node); end
  def visit_pinned_variable_node(node); end
  def visit_post_execution_node(node); end
  def visit_pre_execution_node(node); end
  def visit_program_node(node); end
  def visit_range_node(node); end
  def visit_rational_node(node); end
  def visit_redo_node(node); end
  def visit_regular_expression_node(node); end
  def visit_required_keyword_parameter_node(node); end
  def visit_required_parameter_node(node); end
  def visit_rescue_modifier_node(node); end
  def visit_rescue_node(node); end
  def visit_rest_parameter_node(node); end
  def visit_retry_node(node); end
  def visit_return_node(node); end
  def visit_self_node(node); end
  def visit_shareable_constant_node(node); end
  def visit_singleton_class_node(node); end
  def visit_source_encoding_node(node); end
  def visit_source_file_node(node); end
  def visit_source_line_node(node); end
  def visit_splat_node(node); end
  def visit_statements_node(node); end
  def visit_string_node(node); end
  def visit_super_node(node); end
  def visit_symbol_node(node); end
  def visit_true_node(node); end
  def visit_undef_node(node); end
  def visit_unless_node(node); end
  def visit_until_node(node); end
  def visit_when_node(node); end
  def visit_while_node(node); end
  def visit_x_string_node(node); end
  def visit_yield_node(node); end
end
