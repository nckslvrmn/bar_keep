# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: false
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/solid_queue/all/solid_queue.rbi
#
# solid_queue-1.1.5

module SolidQueue
  def app_executor; end
  def app_executor=(val); end
  def clear_finished_jobs_after; end
  def clear_finished_jobs_after=(val); end
  def connects_to; end
  def connects_to=(val); end
  def default_concurrency_control_period; end
  def default_concurrency_control_period=(val); end
  def instrument(channel, **options, &block); end
  def logger; end
  def logger=(val); end
  def on_exit(&); end
  def on_start(&); end
  def on_stop(&); end
  def on_thread_error; end
  def on_thread_error=(val); end
  def preserve_finished_jobs; end
  def preserve_finished_jobs=(val); end
  def preserve_finished_jobs?; end
  def process_alive_threshold; end
  def process_alive_threshold=(val); end
  def process_heartbeat_interval; end
  def process_heartbeat_interval=(val); end
  def self.app_executor; end
  def self.app_executor=(val); end
  def self.clear_finished_jobs_after; end
  def self.clear_finished_jobs_after=(val); end
  def self.connects_to; end
  def self.connects_to=(val); end
  def self.default_concurrency_control_period; end
  def self.default_concurrency_control_period=(val); end
  def self.logger; end
  def self.logger=(val); end
  def self.on_dispatcher_exit(&block); end
  def self.on_dispatcher_start(&block); end
  def self.on_dispatcher_stop(&block); end
  def self.on_scheduler_exit(&block); end
  def self.on_scheduler_start(&block); end
  def self.on_scheduler_stop(&block); end
  def self.on_thread_error; end
  def self.on_thread_error=(val); end
  def self.on_worker_exit(&block); end
  def self.on_worker_start(&block); end
  def self.on_worker_stop(&block); end
  def self.preserve_finished_jobs; end
  def self.preserve_finished_jobs=(val); end
  def self.process_alive_threshold; end
  def self.process_alive_threshold=(val); end
  def self.process_heartbeat_interval; end
  def self.process_heartbeat_interval=(val); end
  def self.railtie_helpers_paths; end
  def self.railtie_namespace; end
  def self.railtie_routes_url_helpers(include_path_helpers = nil); end
  def self.shutdown_timeout; end
  def self.shutdown_timeout=(val); end
  def self.silence_polling; end
  def self.silence_polling=(val); end
  def self.supervisor; end
  def self.supervisor=(val); end
  def self.supervisor_pidfile; end
  def self.supervisor_pidfile=(val); end
  def self.table_name_prefix; end
  def self.use_relative_model_naming?; end
  def self.use_skip_locked; end
  def self.use_skip_locked=(val); end
  def shutdown_timeout; end
  def shutdown_timeout=(val); end
  def silence_polling; end
  def silence_polling=(val); end
  def silence_polling?; end
  def supervisor; end
  def supervisor=(val); end
  def supervisor?; end
  def supervisor_pidfile; end
  def supervisor_pidfile=(val); end
  def use_skip_locked; end
  def use_skip_locked=(val); end
  extend SolidQueue
end
class SolidQueue::Engine < Rails::Engine
end
module SolidQueue::Processes
end
module SolidQueue::Processes::Callbacks
  extend ActiveSupport::Concern
end
module SolidQueue::AppExecutor
  def handle_thread_error(error); end
  def wrap_in_app_executor(&block); end
end
module SolidQueue::Processes::Registrable
  def deregister; end
  def heartbeat; end
  def launch_heartbeat; end
  def process; end
  def process=(arg0); end
  def process_id; end
  def register; end
  def registered?; end
  def stop_heartbeat; end
  extend ActiveSupport::Concern
end
module SolidQueue::Processes::Interruptible
  def create_self_pipe; end
  def interrupt; end
  def interruptible_sleep(time); end
  def self_pipe; end
  def wake_up; end
end
module SolidQueue::Processes::Procline
  def procline(string); end
end
class SolidQueue::Processes::Base
  def __callbacks; end
  def _boot_callbacks; end
  def _run_boot_callbacks(&block); end
  def _run_shutdown_callbacks(&block); end
  def _shutdown_callbacks; end
  def generate_name; end
  def hostname; end
  def initialize(*); end
  def kind; end
  def metadata; end
  def name; end
  def pid; end
  def self.__callbacks; end
  def self.__callbacks=(value); end
  def self.__class_attr___callbacks; end
  def self.__class_attr___callbacks=(new_value); end
  def self._boot_callbacks; end
  def self._boot_callbacks=(value); end
  def self._shutdown_callbacks; end
  def self._shutdown_callbacks=(value); end
  def self.after_boot(*args, **options, &block); end
  def self.after_shutdown(*args, **options, &block); end
  def self.around_boot(*args, **options, &block); end
  def self.around_shutdown(*args, **options, &block); end
  def self.before_boot(*args, **options, &block); end
  def self.before_shutdown(*args, **options, &block); end
  def stop; end
  def stopped?; end
  extend ActiveModel::Callbacks
  extend ActiveSupport::Callbacks::ClassMethods
  extend ActiveSupport::DescendantsTracker
  include ActiveSupport::Callbacks
  include SolidQueue::AppExecutor
  include SolidQueue::Processes::Callbacks
end
module SolidQueue::LifecycleHooks
  def run_exit_hooks; end
  def run_hooks_for(event); end
  def run_start_hooks; end
  def run_stop_hooks; end
  extend ActiveSupport::Concern
end
module SolidQueue::LifecycleHooks::ClassMethods
  def clear_hooks; end
  def on_exit(&block); end
  def on_start(&block); end
  def on_stop(&block); end
end
module SolidQueue::Supervisor::Maintenance
  def fail_orphaned_executions; end
  def launch_maintenance_task; end
  def prune_dead_processes; end
  def stop_maintenance_task; end
  extend ActiveSupport::Concern
end
class SolidQueue::Supervisor < SolidQueue::Processes::Base
  def all_forks_terminated?; end
  def boot; end
  def configuration; end
  def configured_processes; end
  def forks; end
  def handle_claimed_jobs_by(terminated_fork, status); end
  def initialize(configuration); end
  def lifecycle_hooks; end
  def quit_forks; end
  def reap_and_replace_terminated_forks; end
  def reap_terminated_forks; end
  def replace_fork(pid, status); end
  def self.__class_attr___callbacks; end
  def self.__class_attr___callbacks=(new_value); end
  def self.lifecycle_hooks; end
  def self.start(**options); end
  def set_procline; end
  def shutdown; end
  def start; end
  def start_process(configured_process); end
  def start_processes; end
  def stop; end
  def supervise; end
  def supervised_processes; end
  def sync_std_streams; end
  def term_forks; end
  def terminate_gracefully; end
  def terminate_immediately; end
  extend SolidQueue::LifecycleHooks::ClassMethods
  include SolidQueue::LifecycleHooks
  include SolidQueue::Supervisor::Maintenance
end
module SolidQueue::Supervisor::Signals
  def handle_signal(signal); end
  def process_signal_queue; end
  def register_signal_handlers; end
  def restore_default_signal_handlers; end
  def signal_process(pid, signal); end
  def signal_processes(pids, signal); end
  def signal_queue; end
  extend ActiveSupport::Concern
end
module SolidQueue::Supervisor::Pidfiled
  def delete_pidfile; end
  def setup_pidfile; end
  extend ActiveSupport::Concern
end
module SolidQueue::Processes::Supervised
  def register_signal_handlers; end
  def set_procline; end
  def supervised?; end
  def supervised_by(process); end
  def supervisor_went_away?; end
  extend ActiveSupport::Concern
end
module SolidQueue::Processes::Runnable
  def all_work_completed?; end
  def boot; end
  def create_thread(&block); end
  def finished?; end
  def mode; end
  def mode=(arg0); end
  def run; end
  def running_as_fork?; end
  def running_async?; end
  def running_inline?; end
  def set_procline; end
  def shutdown; end
  def shutting_down?; end
  def start; end
  def stop; end
  def supervisor; end
  include SolidQueue::Processes::Supervised
end
class SolidQueue::Processes::Poller < SolidQueue::Processes::Base
  def initialize(polling_interval:, **options); end
  def metadata; end
  def poll; end
  def polling_interval; end
  def polling_interval=(arg0); end
  def run; end
  def start_loop; end
  def with_polling_volume; end
  include SolidQueue::Processes::Runnable
end
class SolidQueue::Dispatcher < SolidQueue::Processes::Poller
  def all_work_completed?; end
  def batch_size; end
  def concurrency_maintenance; end
  def dispatch_next_batch; end
  def initialize(**options); end
  def lifecycle_hooks; end
  def metadata; end
  def poll; end
  def self.__class_attr___callbacks; end
  def self.__class_attr___callbacks=(new_value); end
  def self.lifecycle_hooks; end
  def set_procline; end
  def start_concurrency_maintenance; end
  def stop_concurrency_maintenance; end
  extend SolidQueue::LifecycleHooks::ClassMethods
  include SolidQueue::LifecycleHooks
end
class SolidQueue::Scheduler < SolidQueue::Processes::Base
  def all_work_completed?; end
  def initialize(recurring_tasks:, **options); end
  def lifecycle_hooks; end
  def metadata; end
  def recurring_schedule; end
  def run; end
  def schedule_recurring_tasks; end
  def self.__class_attr___callbacks; end
  def self.__class_attr___callbacks=(new_value); end
  def self.lifecycle_hooks; end
  def set_procline; end
  def unschedule_recurring_tasks; end
  extend SolidQueue::LifecycleHooks::ClassMethods
  include SolidQueue::LifecycleHooks
  include SolidQueue::Processes::Runnable
end
class SolidQueue::Worker < SolidQueue::Processes::Poller
  def all_work_completed?; end
  def claim_executions; end
  def initialize(**options); end
  def lifecycle_hooks; end
  def metadata; end
  def poll; end
  def pool; end
  def queues; end
  def self.__class_attr___callbacks; end
  def self.__class_attr___callbacks=(new_value); end
  def self.lifecycle_hooks; end
  def set_procline; end
  def shutdown; end
  extend SolidQueue::LifecycleHooks::ClassMethods
  include SolidQueue::LifecycleHooks
end
class SolidQueue::LogSubscriber < ActiveSupport::LogSubscriber
  def claim(event); end
  def deregister_process(event); end
  def discard(event); end
  def discard_all(event); end
  def dispatch_scheduled(event); end
  def enqueue_recurring_task(event); end
  def fail_many_claimed(event); end
  def formatted_attributes(**attributes); end
  def formatted_error(error); end
  def formatted_event(event, action:, **attributes); end
  def graceful_termination(event); end
  def immediate_termination(event); end
  def logger; end
  def prune_processes(event); end
  def register_process(event); end
  def release_blocked(event); end
  def release_claimed(event); end
  def release_many_blocked(event); end
  def release_many_claimed(event); end
  def replace_fork(event); end
  def retry(event); end
  def retry_all(event); end
  def shutdown_process(event); end
  def start_process(event); end
  def thread_error(event); end
  def unhandled_signal_error(event); end
end
module ActiveJob
end
module ActiveJob::ConcurrencyControls
  def compute_concurrency_parameter(option); end
  def concurrency_group; end
  def concurrency_key; end
  def concurrency_limited?; end
  extend ActiveSupport::Concern
end
module ActiveJob::ConcurrencyControls::ClassMethods
  def limits_concurrency(key:, to: nil, group: nil, duration: nil); end
end
class SolidQueue::RecurringJob < ActiveJob::Base
  def perform(command); end
  def self.__class_attr_queue_name; end
  def self.__class_attr_queue_name=(new_value); end
end
class SolidQueue::Record::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Base::GeneratedRelationMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Record::GeneratedRelationMethods
end
module SolidQueue::Record::GeneratedRelationMethods
end
class SolidQueue::Record::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Base::GeneratedRelationMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Record::GeneratedRelationMethods
end
class SolidQueue::Record::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Base::GeneratedRelationMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Record::GeneratedRelationMethods
end
class SolidQueue::Record::ActiveRecord_DisableJoinsAssociationRelation < ActiveRecord::DisableJoinsAssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Base::GeneratedRelationMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Record::GeneratedRelationMethods
end
class SolidQueue::Record < ActiveRecord::Base
  def self.__class_attr__validators; end
  def self.__class_attr__validators=(new_value); end
  def self.__class_attr_defined_enums; end
  def self.__class_attr_defined_enums=(new_value); end
  def self.non_blocking_lock; end
  include SolidQueue::Record::GeneratedAssociationMethods
  include SolidQueue::Record::GeneratedAttributeMethods
end
module SolidQueue::Record::GeneratedAttributeMethods
end
module SolidQueue::Record::GeneratedAssociationMethods
end
class SolidQueue::Execution < SolidQueue::Record
  def autosave_associated_records_for_job(*args); end
  def discard; end
  def self.__class_attr___callbacks; end
  def self.__class_attr___callbacks=(new_value); end
  def self.__class_attr__reflections; end
  def self.__class_attr__reflections=(new_value); end
  def self.__class_attr__validators; end
  def self.__class_attr__validators=(new_value); end
  def self.__class_attr_assumable_attributes_from_job; end
  def self.__class_attr_assumable_attributes_from_job=(new_value); end
  def self.__class_attr_defined_enums; end
  def self.__class_attr_defined_enums=(new_value); end
  def self.assumable_attributes_from_job; end
  def self.assumable_attributes_from_job=(value); end
  def self.assumable_attributes_from_job?; end
  def self.create_all_from_jobs(jobs); end
  def self.discard_all_from_jobs(jobs); end
  def self.discard_all_in_batches(batch_size: nil); end
  def self.discard_jobs(job_ids); end
  def self.execution_data_from_jobs(jobs); end
  def self.lock_all_from_jobs(jobs); end
  def self.ordered(*args, **); end
  def self.type; end
  def type; end
  extend SolidQueue::Execution::JobAttributes::ClassMethods
  include SolidQueue::Execution::GeneratedAssociationMethods
  include SolidQueue::Execution::GeneratedAttributeMethods
  include SolidQueue::Execution::JobAttributes
end
module SolidQueue::Execution::JobAttributes
  def assume_attributes_from_job; end
  extend ActiveSupport::Concern
end
module SolidQueue::Execution::JobAttributes::ClassMethods
  def assumes_attributes_from_job(*attribute_names); end
  def attributes_from_job(job); end
end
class SolidQueue::Execution::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Execution::GeneratedRelationMethods
  include SolidQueue::Record::GeneratedRelationMethods
end
module SolidQueue::Execution::GeneratedRelationMethods
  def ordered(*, **, &); end
end
class SolidQueue::Execution::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Execution::GeneratedRelationMethods
  include SolidQueue::Record::GeneratedRelationMethods
end
class SolidQueue::Execution::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Execution::GeneratedRelationMethods
  include SolidQueue::Record::GeneratedRelationMethods
end
class SolidQueue::Execution::ActiveRecord_DisableJoinsAssociationRelation < ActiveRecord::DisableJoinsAssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Execution::GeneratedRelationMethods
  include SolidQueue::Record::GeneratedRelationMethods
end
module SolidQueue::Execution::GeneratedAttributeMethods
end
module SolidQueue::Execution::GeneratedAssociationMethods
  def build_job(*args, &block); end
  def create_job!(*args, &block); end
  def create_job(*args, &block); end
  def job; end
  def job=(value); end
  def job_changed?; end
  def job_previously_changed?; end
  def reload_job; end
  def reset_job; end
end
class SolidQueue::Execution::UndiscardableError < StandardError
end
class SolidQueue::BlockedExecution::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::BlockedExecution::GeneratedRelationMethods
  include SolidQueue::Execution::GeneratedRelationMethods
end
module SolidQueue::BlockedExecution::GeneratedRelationMethods
  def expired(*, **, &); end
end
class SolidQueue::BlockedExecution::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::BlockedExecution::GeneratedRelationMethods
  include SolidQueue::Execution::GeneratedRelationMethods
end
class SolidQueue::BlockedExecution::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::BlockedExecution::GeneratedRelationMethods
  include SolidQueue::Execution::GeneratedRelationMethods
end
class SolidQueue::BlockedExecution::ActiveRecord_DisableJoinsAssociationRelation < ActiveRecord::DisableJoinsAssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::BlockedExecution::GeneratedRelationMethods
  include SolidQueue::Execution::GeneratedRelationMethods
end
class SolidQueue::BlockedExecution < SolidQueue::Execution
  def acquire_concurrency_lock; end
  def autosave_associated_records_for_semaphore(*args); end
  def promote_to_ready; end
  def ready_attributes; end
  def release; end
  def self.__class_attr___callbacks; end
  def self.__class_attr___callbacks=(new_value); end
  def self.__class_attr__reflections; end
  def self.__class_attr__reflections=(new_value); end
  def self.__class_attr__validators; end
  def self.__class_attr__validators=(new_value); end
  def self.__class_attr_assumable_attributes_from_job; end
  def self.__class_attr_assumable_attributes_from_job=(new_value); end
  def self.__class_attr_defined_enums; end
  def self.__class_attr_defined_enums=(new_value); end
  def self.expired(*args, **); end
  def self.releasable(concurrency_keys); end
  def self.release_many(concurrency_keys); end
  def self.release_one(concurrency_key); end
  def self.unblock(limit); end
  def set_expires_at; end
  include SolidQueue::BlockedExecution::GeneratedAssociationMethods
  include SolidQueue::BlockedExecution::GeneratedAttributeMethods
end
module SolidQueue::BlockedExecution::GeneratedAttributeMethods
end
module SolidQueue::BlockedExecution::GeneratedAssociationMethods
  def build_semaphore(*args, &block); end
  def create_semaphore!(*args, &block); end
  def create_semaphore(*args, &block); end
  def reload_semaphore; end
  def reset_semaphore; end
  def semaphore; end
  def semaphore=(value); end
end
class SolidQueue::ClaimedExecution::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::ClaimedExecution::GeneratedRelationMethods
  include SolidQueue::Execution::GeneratedRelationMethods
end
module SolidQueue::ClaimedExecution::GeneratedRelationMethods
  def orphaned(*, **, &); end
end
class SolidQueue::ClaimedExecution::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::ClaimedExecution::GeneratedRelationMethods
  include SolidQueue::Execution::GeneratedRelationMethods
end
class SolidQueue::ClaimedExecution::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::ClaimedExecution::GeneratedRelationMethods
  include SolidQueue::Execution::GeneratedRelationMethods
end
class SolidQueue::ClaimedExecution::ActiveRecord_DisableJoinsAssociationRelation < ActiveRecord::DisableJoinsAssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::ClaimedExecution::GeneratedRelationMethods
  include SolidQueue::Execution::GeneratedRelationMethods
end
class SolidQueue::ClaimedExecution < SolidQueue::Execution
  def autosave_associated_records_for_process(*args); end
  def discard; end
  def execute; end
  def failed_with(error); end
  def finished; end
  def perform; end
  def release; end
  def self.__class_attr___callbacks; end
  def self.__class_attr___callbacks=(new_value); end
  def self.__class_attr__reflections; end
  def self.__class_attr__reflections=(new_value); end
  def self.__class_attr__validators; end
  def self.__class_attr__validators=(new_value); end
  def self.__class_attr_defined_enums; end
  def self.__class_attr_defined_enums=(new_value); end
  def self.claiming(job_ids, process_id, &block); end
  def self.discard_all_from_jobs(*); end
  def self.discard_all_in_batches(*); end
  def self.fail_all_with(error); end
  def self.orphaned(*args, **); end
  def self.release_all; end
  def unblock_next_job; end
  include SolidQueue::ClaimedExecution::GeneratedAssociationMethods
  include SolidQueue::ClaimedExecution::GeneratedAttributeMethods
end
module SolidQueue::ClaimedExecution::GeneratedAttributeMethods
end
module SolidQueue::ClaimedExecution::GeneratedAssociationMethods
  def build_process(*args, &block); end
  def create_process!(*args, &block); end
  def create_process(*args, &block); end
  def process; end
  def process=(value); end
  def process_changed?; end
  def process_previously_changed?; end
  def reload_process; end
  def reset_process; end
end
class Anonymous_Struct_43 < Struct
  def error; end
  def error=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
  def success; end
  def success=(_); end
end
class SolidQueue::ClaimedExecution::Result < Anonymous_Struct_43
  def success?; end
end
module SolidQueue::Execution::Dispatching
  extend ActiveSupport::Concern
end
module SolidQueue::Execution::Dispatching::ClassMethods
  def dispatch_jobs(job_ids); end
end
class SolidQueue::FailedExecution::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Execution::GeneratedRelationMethods
  include SolidQueue::FailedExecution::GeneratedRelationMethods
end
module SolidQueue::FailedExecution::GeneratedRelationMethods
end
class SolidQueue::FailedExecution::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Execution::GeneratedRelationMethods
  include SolidQueue::FailedExecution::GeneratedRelationMethods
end
class SolidQueue::FailedExecution::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Execution::GeneratedRelationMethods
  include SolidQueue::FailedExecution::GeneratedRelationMethods
end
class SolidQueue::FailedExecution::ActiveRecord_DisableJoinsAssociationRelation < ActiveRecord::DisableJoinsAssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Execution::GeneratedRelationMethods
  include SolidQueue::FailedExecution::GeneratedRelationMethods
end
class SolidQueue::FailedExecution < SolidQueue::Execution
  def backtrace; end
  def determine_backtrace_size_limit; end
  def exception; end
  def exception=(arg0); end
  def exception_backtrace; end
  def exception_class; end
  def exception_class_name; end
  def exception_message; end
  def expand_error_details_from_exception; end
  def message; end
  def retry; end
  def self.__class_attr___callbacks; end
  def self.__class_attr___callbacks=(new_value); end
  def self.__class_attr__validators; end
  def self.__class_attr__validators=(new_value); end
  def self.__class_attr_defined_enums; end
  def self.__class_attr_defined_enums=(new_value); end
  def self.retry_all(jobs); end
  def truncate_backtrace(lines, limit); end
  extend SolidQueue::Execution::Dispatching::ClassMethods
  include SolidQueue::Execution::Dispatching
  include SolidQueue::FailedExecution::GeneratedAssociationMethods
  include SolidQueue::FailedExecution::GeneratedAttributeMethods
end
module SolidQueue::FailedExecution::GeneratedAttributeMethods
end
module SolidQueue::FailedExecution::GeneratedAssociationMethods
end
class SolidQueue::Job < SolidQueue::Record
  def autosave_associated_records_for_blocked_execution(*args); end
  def autosave_associated_records_for_claimed_execution(*args); end
  def autosave_associated_records_for_failed_execution(*args); end
  def autosave_associated_records_for_ready_execution(*args); end
  def autosave_associated_records_for_recurring_execution(*args); end
  def autosave_associated_records_for_scheduled_execution(*args); end
  def concurrency_duration(*, **, &); end
  def concurrency_limit(*, **, &); end
  def self.__class_attr___callbacks; end
  def self.__class_attr___callbacks=(new_value); end
  def self.__class_attr__reflections; end
  def self.__class_attr__reflections=(new_value); end
  def self.__class_attr__validators; end
  def self.__class_attr__validators=(new_value); end
  def self.__class_attr_defined_enums; end
  def self.__class_attr_defined_enums=(new_value); end
  def self.attributes_from_active_job(active_job); end
  def self.clearable(*args, **); end
  def self.create_all_from_active_jobs(active_jobs); end
  def self.create_from_active_job(active_job); end
  def self.enqueue(active_job, scheduled_at: nil); end
  def self.enqueue_all(active_jobs); end
  def self.failed(*args, **); end
  def self.finished(*args, **); end
  def self.scheduled(*args, **); end
  extend SolidQueue::Job::Clearable::ClassMethods
  extend SolidQueue::Job::ConcurrencyControls::ClassMethods
  extend SolidQueue::Job::Executable::ClassMethods
  extend SolidQueue::Job::Schedulable::ClassMethods
  include SolidQueue::Job::ConcurrencyControls
  include SolidQueue::Job::Executable
  include SolidQueue::Job::GeneratedAssociationMethods
  include SolidQueue::Job::GeneratedAttributeMethods
end
module SolidQueue::Job::Executable
  def claimed?; end
  def discard; end
  def dispatch; end
  def dispatch_bypassing_concurrency_limits; end
  def execution; end
  def failed?; end
  def finished!; end
  def finished?; end
  def prepare_for_execution; end
  def ready; end
  def ready?; end
  def status; end
  extend ActiveSupport::Concern
end
module SolidQueue::Job::Executable::ClassMethods
  def dispatch_all(jobs); end
  def dispatch_all_at_once(jobs); end
  def dispatch_all_one_by_one(jobs); end
  def dispatched_and_blocked(jobs); end
  def dispatched_and_ready(jobs); end
  def prepare_all_for_execution(jobs); end
  def successfully_dispatched(jobs); end
end
module SolidQueue::Job::Clearable
  extend ActiveSupport::Concern
end
module SolidQueue::Job::Clearable::ClassMethods
  def clear_finished_in_batches(batch_size: nil, finished_before: nil, class_name: nil, sleep_between_batches: nil); end
end
module SolidQueue::Job::Recurrable
  extend ActiveSupport::Concern
end
module SolidQueue::Job::ConcurrencyControls
  def acquire_concurrency_lock; end
  def block; end
  def blocked?; end
  def concurrency_limited?; end
  def execution; end
  def job_class; end
  def release_concurrency_lock; end
  def release_next_blocked_job; end
  def unblock_next_blocked_job; end
  extend ActiveSupport::Concern
end
module SolidQueue::Job::ConcurrencyControls::ClassMethods
  def release_all_concurrency_locks(jobs); end
end
module SolidQueue::Job::Schedulable
  def due?; end
  def execution; end
  def schedule; end
  def scheduled?; end
  extend ActiveSupport::Concern
end
module SolidQueue::Job::Schedulable::ClassMethods
  def schedule_all(jobs); end
  def schedule_all_at_once(jobs); end
  def successfully_scheduled(jobs); end
end
module SolidQueue::Job::Retryable
  def failed_with(exception); end
  def reset_execution_counters; end
  def retry; end
  extend ActiveSupport::Concern
end
class SolidQueue::Job::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Job::GeneratedRelationMethods
  include SolidQueue::Record::GeneratedRelationMethods
end
module SolidQueue::Job::GeneratedRelationMethods
  def clearable(*, **, &); end
  def failed(*, **, &); end
  def finished(*, **, &); end
  def scheduled(*, **, &); end
end
class SolidQueue::Job::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Job::GeneratedRelationMethods
  include SolidQueue::Record::GeneratedRelationMethods
end
class SolidQueue::Job::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Job::GeneratedRelationMethods
  include SolidQueue::Record::GeneratedRelationMethods
end
class SolidQueue::Job::ActiveRecord_DisableJoinsAssociationRelation < ActiveRecord::DisableJoinsAssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Job::GeneratedRelationMethods
  include SolidQueue::Record::GeneratedRelationMethods
end
module SolidQueue::Job::GeneratedAttributeMethods
end
module SolidQueue::Job::GeneratedAssociationMethods
  def blocked_execution; end
  def blocked_execution=(value); end
  def build_blocked_execution(*args, &block); end
  def build_claimed_execution(*args, &block); end
  def build_failed_execution(*args, &block); end
  def build_ready_execution(*args, &block); end
  def build_recurring_execution(*args, &block); end
  def build_scheduled_execution(*args, &block); end
  def claimed_execution; end
  def claimed_execution=(value); end
  def create_blocked_execution!(*args, &block); end
  def create_blocked_execution(*args, &block); end
  def create_claimed_execution!(*args, &block); end
  def create_claimed_execution(*args, &block); end
  def create_failed_execution!(*args, &block); end
  def create_failed_execution(*args, &block); end
  def create_ready_execution!(*args, &block); end
  def create_ready_execution(*args, &block); end
  def create_recurring_execution!(*args, &block); end
  def create_recurring_execution(*args, &block); end
  def create_scheduled_execution!(*args, &block); end
  def create_scheduled_execution(*args, &block); end
  def failed_execution; end
  def failed_execution=(value); end
  def ready_execution; end
  def ready_execution=(value); end
  def recurring_execution; end
  def recurring_execution=(value); end
  def reload_blocked_execution; end
  def reload_claimed_execution; end
  def reload_failed_execution; end
  def reload_ready_execution; end
  def reload_recurring_execution; end
  def reload_scheduled_execution; end
  def reset_blocked_execution; end
  def reset_claimed_execution; end
  def reset_failed_execution; end
  def reset_ready_execution; end
  def reset_recurring_execution; end
  def reset_scheduled_execution; end
  def scheduled_execution; end
  def scheduled_execution=(value); end
end
class SolidQueue::Job::EnqueueError < StandardError
end
class SolidQueue::Pause::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Pause::GeneratedRelationMethods
  include SolidQueue::Record::GeneratedRelationMethods
end
module SolidQueue::Pause::GeneratedRelationMethods
end
class SolidQueue::Pause::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Pause::GeneratedRelationMethods
  include SolidQueue::Record::GeneratedRelationMethods
end
class SolidQueue::Pause::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Pause::GeneratedRelationMethods
  include SolidQueue::Record::GeneratedRelationMethods
end
class SolidQueue::Pause::ActiveRecord_DisableJoinsAssociationRelation < ActiveRecord::DisableJoinsAssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Pause::GeneratedRelationMethods
  include SolidQueue::Record::GeneratedRelationMethods
end
class SolidQueue::Pause < SolidQueue::Record
  def self.__class_attr__validators; end
  def self.__class_attr__validators=(new_value); end
  def self.__class_attr_defined_enums; end
  def self.__class_attr_defined_enums=(new_value); end
  include SolidQueue::Pause::GeneratedAssociationMethods
  include SolidQueue::Pause::GeneratedAttributeMethods
end
module SolidQueue::Pause::GeneratedAttributeMethods
end
module SolidQueue::Pause::GeneratedAssociationMethods
end
class SolidQueue::Process < SolidQueue::Record
  def autosave_associated_records_for_claimed_executions(*args); end
  def autosave_associated_records_for_supervisees(*args); end
  def autosave_associated_records_for_supervisor(*args); end
  def deregister(pruned: nil); end
  def heartbeat; end
  def self.__class_attr___callbacks; end
  def self.__class_attr___callbacks=(new_value); end
  def self.__class_attr__reflections; end
  def self.__class_attr__reflections=(new_value); end
  def self.__class_attr__validators; end
  def self.__class_attr__validators=(new_value); end
  def self.__class_attr_defined_enums; end
  def self.__class_attr_defined_enums=(new_value); end
  def self.prunable(*args, **); end
  def self.register(**attributes); end
  def supervised?; end
  def validate_associated_records_for_claimed_executions(*args); end
  def validate_associated_records_for_supervisees(*args); end
  extend SolidQueue::Process::Prunable::ClassMethods
  include SolidQueue::Process::Executor
  include SolidQueue::Process::GeneratedAssociationMethods
  include SolidQueue::Process::GeneratedAttributeMethods
end
module SolidQueue::Process::Executor
  def claims_executions?; end
  def fail_all_claimed_executions_with(error); end
  def release_all_claimed_executions; end
  extend ActiveSupport::Concern
end
module SolidQueue::Process::Prunable
  def prune; end
  extend ActiveSupport::Concern
end
module SolidQueue::Process::Prunable::ClassMethods
  def prune(excluding: nil); end
end
class SolidQueue::Process::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Process::GeneratedRelationMethods
  include SolidQueue::Record::GeneratedRelationMethods
end
module SolidQueue::Process::GeneratedRelationMethods
  def prunable(*, **, &); end
end
class SolidQueue::Process::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Process::GeneratedRelationMethods
  include SolidQueue::Record::GeneratedRelationMethods
end
class SolidQueue::Process::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Process::GeneratedRelationMethods
  include SolidQueue::Record::GeneratedRelationMethods
end
class SolidQueue::Process::ActiveRecord_DisableJoinsAssociationRelation < ActiveRecord::DisableJoinsAssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Process::GeneratedRelationMethods
  include SolidQueue::Record::GeneratedRelationMethods
end
module SolidQueue::Process::GeneratedAttributeMethods
end
module SolidQueue::Process::GeneratedAssociationMethods
  def build_supervisor(*args, &block); end
  def claimed_execution_ids; end
  def claimed_execution_ids=(ids); end
  def claimed_executions; end
  def claimed_executions=(value); end
  def create_supervisor!(*args, &block); end
  def create_supervisor(*args, &block); end
  def reload_supervisor; end
  def reset_supervisor; end
  def supervisee_ids; end
  def supervisee_ids=(ids); end
  def supervisees; end
  def supervisees=(value); end
  def supervisor; end
  def supervisor=(value); end
  def supervisor_changed?; end
  def supervisor_previously_changed?; end
end
class SolidQueue::Queue
  def ==(queue); end
  def clear; end
  def eql?(queue); end
  def hash; end
  def human_latency; end
  def initialize(name); end
  def latency; end
  def name; end
  def name=(arg0); end
  def pause; end
  def paused?; end
  def resume; end
  def self.all; end
  def self.find_by_name(name); end
  def size; end
end
class SolidQueue::QueueSelector
  def all?; end
  def all_queues; end
  def delete_in_order(raw_queue, queues); end
  def eligible_queues; end
  def exact_name?(queue); end
  def exact_names; end
  def in_raw_order(queues); end
  def include_all_queues?; end
  def initialize(queue_list, relation); end
  def none?; end
  def paused_queues; end
  def prefixed_name?(queue); end
  def prefixed_names; end
  def prefixes; end
  def queue_names; end
  def raw_queues; end
  def relation; end
  def scoped_relations; end
end
class SolidQueue::ReadyExecution::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Execution::GeneratedRelationMethods
  include SolidQueue::ReadyExecution::GeneratedRelationMethods
end
module SolidQueue::ReadyExecution::GeneratedRelationMethods
  def queued_as(*, **, &); end
end
class SolidQueue::ReadyExecution::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Execution::GeneratedRelationMethods
  include SolidQueue::ReadyExecution::GeneratedRelationMethods
end
class SolidQueue::ReadyExecution::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Execution::GeneratedRelationMethods
  include SolidQueue::ReadyExecution::GeneratedRelationMethods
end
class SolidQueue::ReadyExecution::ActiveRecord_DisableJoinsAssociationRelation < ActiveRecord::DisableJoinsAssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Execution::GeneratedRelationMethods
  include SolidQueue::ReadyExecution::GeneratedRelationMethods
end
class SolidQueue::ReadyExecution < SolidQueue::Execution
  def self.__class_attr___callbacks; end
  def self.__class_attr___callbacks=(new_value); end
  def self.__class_attr__validators; end
  def self.__class_attr__validators=(new_value); end
  def self.__class_attr_assumable_attributes_from_job; end
  def self.__class_attr_assumable_attributes_from_job=(new_value); end
  def self.__class_attr_defined_enums; end
  def self.__class_attr_defined_enums=(new_value); end
  def self.aggregated_count_across(queue_list); end
  def self.claim(queue_list, limit, process_id); end
  def self.discard_jobs(job_ids); end
  def self.lock_candidates(executions, process_id); end
  def self.queued_as(*args, **); end
  def self.select_and_lock(queue_relation, process_id, limit); end
  def self.select_candidates(queue_relation, limit); end
  include SolidQueue::ReadyExecution::GeneratedAssociationMethods
  include SolidQueue::ReadyExecution::GeneratedAttributeMethods
end
module SolidQueue::ReadyExecution::GeneratedAttributeMethods
end
module SolidQueue::ReadyExecution::GeneratedAssociationMethods
end
class SolidQueue::RecurringExecution::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Execution::GeneratedRelationMethods
  include SolidQueue::RecurringExecution::GeneratedRelationMethods
end
module SolidQueue::RecurringExecution::GeneratedRelationMethods
  def clearable(*, **, &); end
end
class SolidQueue::RecurringExecution::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Execution::GeneratedRelationMethods
  include SolidQueue::RecurringExecution::GeneratedRelationMethods
end
class SolidQueue::RecurringExecution::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Execution::GeneratedRelationMethods
  include SolidQueue::RecurringExecution::GeneratedRelationMethods
end
class SolidQueue::RecurringExecution::ActiveRecord_DisableJoinsAssociationRelation < ActiveRecord::DisableJoinsAssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Execution::GeneratedRelationMethods
  include SolidQueue::RecurringExecution::GeneratedRelationMethods
end
class SolidQueue::RecurringExecution < SolidQueue::Execution
  def self.__class_attr__validators; end
  def self.__class_attr__validators=(new_value); end
  def self.__class_attr_defined_enums; end
  def self.__class_attr_defined_enums=(new_value); end
  def self.clear_in_batches(batch_size: nil); end
  def self.clearable(*args, **); end
  def self.create_or_insert!(**attributes); end
  def self.record(task_key, run_at, &block); end
  include SolidQueue::RecurringExecution::GeneratedAssociationMethods
  include SolidQueue::RecurringExecution::GeneratedAttributeMethods
end
module SolidQueue::RecurringExecution::GeneratedAttributeMethods
end
module SolidQueue::RecurringExecution::GeneratedAssociationMethods
end
class SolidQueue::RecurringExecution::AlreadyRecorded < StandardError
end
class SolidQueue::RecurringTask::Arguments
  def self.dump(data); end
  def self.load(data); end
end
class SolidQueue::RecurringTask::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Record::GeneratedRelationMethods
  include SolidQueue::RecurringTask::GeneratedRelationMethods
end
module SolidQueue::RecurringTask::GeneratedRelationMethods
  def static(*, **, &); end
end
class SolidQueue::RecurringTask::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Record::GeneratedRelationMethods
  include SolidQueue::RecurringTask::GeneratedRelationMethods
end
class SolidQueue::RecurringTask::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Record::GeneratedRelationMethods
  include SolidQueue::RecurringTask::GeneratedRelationMethods
end
class SolidQueue::RecurringTask::ActiveRecord_DisableJoinsAssociationRelation < ActiveRecord::DisableJoinsAssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Record::GeneratedRelationMethods
  include SolidQueue::RecurringTask::GeneratedRelationMethods
end
class SolidQueue::RecurringTask < SolidQueue::Record
  def arguments_with_kwargs; end
  def attributes_for_upsert; end
  def autosave_associated_records_for_recurring_executions(*args); end
  def default_job_class; end
  def default_job_class=(val); end
  def delay_from_now; end
  def enqueue(at:); end
  def enqueue_and_record(run_at:); end
  def enqueue_options; end
  def ensure_command_or_class_present; end
  def existing_job_class; end
  def job_class; end
  def last_enqueued_time; end
  def next_time; end
  def parsed_schedule; end
  def perform_later; end
  def previous_time; end
  def self.__class_attr___callbacks; end
  def self.__class_attr___callbacks=(new_value); end
  def self.__class_attr__reflections; end
  def self.__class_attr__reflections=(new_value); end
  def self.__class_attr__validators; end
  def self.__class_attr__validators=(new_value); end
  def self.__class_attr_defined_enums; end
  def self.__class_attr_defined_enums=(new_value); end
  def self.create_or_update_all(tasks); end
  def self.default_job_class; end
  def self.default_job_class=(val); end
  def self.from_configuration(key, **options); end
  def self.static(*args, **); end
  def self.wrap(args); end
  def supported_schedule; end
  def to_s; end
  def using_solid_queue_adapter?; end
  def validate_associated_records_for_recurring_executions(*args); end
  include SolidQueue::RecurringTask::GeneratedAssociationMethods
  include SolidQueue::RecurringTask::GeneratedAttributeMethods
end
module SolidQueue::RecurringTask::GeneratedAttributeMethods
end
module SolidQueue::RecurringTask::GeneratedAssociationMethods
  def recurring_execution_ids; end
  def recurring_execution_ids=(ids); end
  def recurring_executions; end
  def recurring_executions=(value); end
end
class SolidQueue::ScheduledExecution::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Execution::GeneratedRelationMethods
  include SolidQueue::ScheduledExecution::GeneratedRelationMethods
end
module SolidQueue::ScheduledExecution::GeneratedRelationMethods
  def due(*, **, &); end
  def next_batch(*, **, &); end
  def ordered(*, **, &); end
end
class SolidQueue::ScheduledExecution::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Execution::GeneratedRelationMethods
  include SolidQueue::ScheduledExecution::GeneratedRelationMethods
end
class SolidQueue::ScheduledExecution::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Execution::GeneratedRelationMethods
  include SolidQueue::ScheduledExecution::GeneratedRelationMethods
end
class SolidQueue::ScheduledExecution::ActiveRecord_DisableJoinsAssociationRelation < ActiveRecord::DisableJoinsAssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Execution::GeneratedRelationMethods
  include SolidQueue::ScheduledExecution::GeneratedRelationMethods
end
class SolidQueue::ScheduledExecution < SolidQueue::Execution
  def self.__class_attr___callbacks; end
  def self.__class_attr___callbacks=(new_value); end
  def self.__class_attr__validators; end
  def self.__class_attr__validators=(new_value); end
  def self.__class_attr_assumable_attributes_from_job; end
  def self.__class_attr_assumable_attributes_from_job=(new_value); end
  def self.__class_attr_defined_enums; end
  def self.__class_attr_defined_enums=(new_value); end
  def self.dispatch_next_batch(batch_size); end
  def self.due(*args, **); end
  def self.next_batch(*args, **); end
  def self.ordered(*args, **); end
  extend SolidQueue::Execution::Dispatching::ClassMethods
  include SolidQueue::Execution::Dispatching
  include SolidQueue::ScheduledExecution::GeneratedAssociationMethods
  include SolidQueue::ScheduledExecution::GeneratedAttributeMethods
end
module SolidQueue::ScheduledExecution::GeneratedAttributeMethods
end
module SolidQueue::ScheduledExecution::GeneratedAssociationMethods
end
class SolidQueue::Semaphore::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Record::GeneratedRelationMethods
  include SolidQueue::Semaphore::GeneratedRelationMethods
end
module SolidQueue::Semaphore::GeneratedRelationMethods
  def available(*, **, &); end
  def expired(*, **, &); end
end
class SolidQueue::Semaphore::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Record::GeneratedRelationMethods
  include SolidQueue::Semaphore::GeneratedRelationMethods
end
class SolidQueue::Semaphore::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Record::GeneratedRelationMethods
  include SolidQueue::Semaphore::GeneratedRelationMethods
end
class SolidQueue::Semaphore::ActiveRecord_DisableJoinsAssociationRelation < ActiveRecord::DisableJoinsAssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include SolidQueue::Record::GeneratedRelationMethods
  include SolidQueue::Semaphore::GeneratedRelationMethods
end
class SolidQueue::Semaphore < SolidQueue::Record
  def self.__class_attr__validators; end
  def self.__class_attr__validators=(new_value); end
  def self.__class_attr_defined_enums; end
  def self.__class_attr_defined_enums=(new_value); end
  def self.available(*args, **); end
  def self.create_unique_by(attributes); end
  def self.expired(*args, **); end
  def self.signal(job); end
  def self.signal_all(jobs); end
  def self.wait(job); end
  include SolidQueue::Semaphore::GeneratedAssociationMethods
  include SolidQueue::Semaphore::GeneratedAttributeMethods
end
module SolidQueue::Semaphore::GeneratedAttributeMethods
end
module SolidQueue::Semaphore::GeneratedAssociationMethods
end
class SolidQueue::Semaphore::Proxy
  def attempt_creation; end
  def attempt_decrement; end
  def attempt_increment; end
  def check_limit_or_decrement; end
  def expires_at; end
  def initialize(job); end
  def job; end
  def job=(arg0); end
  def key; end
  def limit; end
  def self.signal_all(jobs); end
  def signal; end
  def wait; end
end
