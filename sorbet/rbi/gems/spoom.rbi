# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: false
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/spoom/all/spoom.rbi
#
# spoom-1.7.4

module Spoom
  def self.parse_ruby(ruby, file:, comments: nil); end
end
class Spoom::FileCollector
  def clean_path(path); end
  def excluded_file?(path); end
  def excluded_path?(path); end
  def files; end
  def initialize(allow_extensions: nil, allow_mime_types: nil, exclude_patterns: nil); end
  def mime_type_for(path); end
  def visit_directory(path); end
  def visit_file(path); end
  def visit_path(path); end
  def visit_paths(paths); end
end
class Spoom::Context
  def absolute_path; end
  def initialize(absolute_path); end
  def self.mktmp!(name = nil); end
  include Spoom::Context::Bundle
  include Spoom::Context::Exec
  include Spoom::Context::FileSystem
  include Spoom::Context::Git
  include Spoom::Context::Sorbet
end
module Spoom::Context::Bundle
  def bundle(command, version: nil, capture_err: nil); end
  def bundle_exec(command, version: nil, capture_err: nil); end
  def bundle_install!(version: nil, capture_err: nil); end
  def gem_version_from_gemfile_lock(gem); end
  def gemfile_lock_specs; end
  def read_gemfile; end
  def read_gemfile_lock; end
  def write_gemfile!(contents, append: nil); end
end
class Spoom::ExecResult < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def err; end
  def exit_code; end
  def out; end
  def self.inherited(s); end
  def status; end
  def to_s; end
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
end
module Spoom::Context::Exec
  def exec(command, capture_err: nil); end
end
module Spoom::Context::FileSystem
  def absolute_path_to(relative_path); end
  def collect_files(allow_extensions: nil, allow_mime_types: nil, exclude_patterns: nil); end
  def destroy!; end
  def exist?; end
  def file?(relative_path); end
  def glob(pattern = nil); end
  def list; end
  def mkdir!; end
  def move!(from_relative_path, to_relative_path); end
  def read(relative_path); end
  def remove!(relative_path); end
  def write!(relative_path, contents = nil, append: nil); end
end
module Spoom::Git
end
class Spoom::Git::Commit < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def self.inherited(s); end
  def self.parse_line(string); end
  def sha; end
  def time; end
  def timestamp; end
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
end
module Spoom::Context::Git
  def git(command); end
  def git_checkout!(ref: nil); end
  def git_checkout_new_branch!(branch_name, ref: nil); end
  def git_commit!(message: nil, time: nil, allow_empty: nil); end
  def git_current_branch; end
  def git_diff(*arg); end
  def git_init!(branch: nil); end
  def git_last_commit(short_sha: nil); end
  def git_log(*arg); end
  def git_push!(remote, ref, force: nil); end
  def git_show(*arg); end
  def git_workdir_clean?(path: nil); end
end
module Spoom::Context::Sorbet
  def has_sorbet_config?; end
  def read_file_strictness(relative_path); end
  def read_sorbet_config; end
  def sorbet_config; end
  def sorbet_intro_commit; end
  def sorbet_removal_commit; end
  def srb(*arg, sorbet_bin: nil, capture_err: nil); end
  def srb_files(with_config: nil, include_rbis: nil); end
  def srb_files_with_strictness(strictness, with_config: nil, include_rbis: nil); end
  def srb_metrics(*arg, sorbet_bin: nil, capture_err: nil); end
  def srb_tc(*arg, sorbet_bin: nil, capture_err: nil); end
  def srb_version(*arg, sorbet_bin: nil, capture_err: nil); end
  def write_sorbet_config!(contents, append: nil); end
end
class Spoom::Color < T::Enum
  def ansi_code; end
end
module Spoom::Colorize
  def set_color(string, *color); end
end
class Spoom::Poset
  def [](value); end
  def add_direct_edge(from, to); end
  def add_element(value); end
  def direct_edge?(from, to); end
  def edge?(from, to); end
  def element?(value); end
  def initialize; end
  def show_dot(direct: nil, transitive: nil); end
  def to_dot(direct: nil, transitive: nil); end
end
class Spoom::Poset::Error < Spoom::Error
end
class Spoom::Poset::Element
  def <=>(other); end
  def ancestors; end
  def children; end
  def descendants; end
  def dfroms; end
  def dtos; end
  def froms; end
  def initialize(value); end
  def parents; end
  def tos; end
  def value; end
  include Comparable
end
class Spoom::Location
  def <=>(other); end
  def end_column; end
  def end_line; end
  def file; end
  def include?(other); end
  def initialize(file, start_line: nil, start_column: nil, end_line: nil, end_column: nil); end
  def self.from_prism(file, location); end
  def self.from_string(location_string); end
  def start_column; end
  def start_line; end
  def to_s; end
  include Comparable
end
class Spoom::Location::LocationError < Spoom::Error
end
class Spoom::Visitor < Prism::Visitor
  def visit_alias_global_variable_node(node); end
  def visit_alias_method_node(node); end
  def visit_alternation_pattern_node(node); end
  def visit_and_node(node); end
  def visit_arguments_node(node); end
  def visit_array_node(node); end
  def visit_array_pattern_node(node); end
  def visit_assoc_node(node); end
  def visit_assoc_splat_node(node); end
  def visit_back_reference_read_node(node); end
  def visit_begin_node(node); end
  def visit_block_argument_node(node); end
  def visit_block_local_variable_node(node); end
  def visit_block_node(node); end
  def visit_block_parameter_node(node); end
  def visit_block_parameters_node(node); end
  def visit_break_node(node); end
  def visit_call_and_write_node(node); end
  def visit_call_node(node); end
  def visit_call_operator_write_node(node); end
  def visit_call_or_write_node(node); end
  def visit_call_target_node(node); end
  def visit_capture_pattern_node(node); end
  def visit_case_match_node(node); end
  def visit_case_node(node); end
  def visit_child_nodes(node); end
  def visit_class_node(node); end
  def visit_class_variable_and_write_node(node); end
  def visit_class_variable_operator_write_node(node); end
  def visit_class_variable_or_write_node(node); end
  def visit_class_variable_read_node(node); end
  def visit_class_variable_target_node(node); end
  def visit_class_variable_write_node(node); end
  def visit_constant_and_write_node(node); end
  def visit_constant_operator_write_node(node); end
  def visit_constant_or_write_node(node); end
  def visit_constant_path_and_write_node(node); end
  def visit_constant_path_node(node); end
  def visit_constant_path_operator_write_node(node); end
  def visit_constant_path_or_write_node(node); end
  def visit_constant_path_target_node(node); end
  def visit_constant_path_write_node(node); end
  def visit_constant_read_node(node); end
  def visit_constant_target_node(node); end
  def visit_constant_write_node(node); end
  def visit_def_node(node); end
  def visit_defined_node(node); end
  def visit_else_node(node); end
  def visit_embedded_statements_node(node); end
  def visit_embedded_variable_node(node); end
  def visit_ensure_node(node); end
  def visit_false_node(node); end
  def visit_find_pattern_node(node); end
  def visit_flip_flop_node(node); end
  def visit_float_node(node); end
  def visit_for_node(node); end
  def visit_forwarding_arguments_node(node); end
  def visit_forwarding_parameter_node(node); end
  def visit_forwarding_super_node(node); end
  def visit_global_variable_and_write_node(node); end
  def visit_global_variable_operator_write_node(node); end
  def visit_global_variable_or_write_node(node); end
  def visit_global_variable_read_node(node); end
  def visit_global_variable_target_node(node); end
  def visit_global_variable_write_node(node); end
  def visit_hash_node(node); end
  def visit_hash_pattern_node(node); end
  def visit_if_node(node); end
  def visit_imaginary_node(node); end
  def visit_implicit_node(node); end
  def visit_implicit_rest_node(node); end
  def visit_in_node(node); end
  def visit_index_and_write_node(node); end
  def visit_index_operator_write_node(node); end
  def visit_index_or_write_node(node); end
  def visit_index_target_node(node); end
  def visit_instance_variable_and_write_node(node); end
  def visit_instance_variable_operator_write_node(node); end
  def visit_instance_variable_or_write_node(node); end
  def visit_instance_variable_read_node(node); end
  def visit_instance_variable_target_node(node); end
  def visit_instance_variable_write_node(node); end
  def visit_integer_node(node); end
  def visit_interpolated_match_last_line_node(node); end
  def visit_interpolated_regular_expression_node(node); end
  def visit_interpolated_string_node(node); end
  def visit_interpolated_symbol_node(node); end
  def visit_interpolated_x_string_node(node); end
  def visit_keyword_hash_node(node); end
  def visit_keyword_rest_parameter_node(node); end
  def visit_lambda_node(node); end
  def visit_local_variable_and_write_node(node); end
  def visit_local_variable_operator_write_node(node); end
  def visit_local_variable_or_write_node(node); end
  def visit_local_variable_read_node(node); end
  def visit_local_variable_target_node(node); end
  def visit_local_variable_write_node(node); end
  def visit_match_last_line_node(node); end
  def visit_match_predicate_node(node); end
  def visit_match_required_node(node); end
  def visit_match_write_node(node); end
  def visit_missing_node(node); end
  def visit_module_node(node); end
  def visit_multi_target_node(node); end
  def visit_multi_write_node(node); end
  def visit_next_node(node); end
  def visit_nil_node(node); end
  def visit_no_keywords_parameter_node(node); end
  def visit_numbered_parameters_node(node); end
  def visit_numbered_reference_read_node(node); end
  def visit_optional_keyword_parameter_node(node); end
  def visit_optional_parameter_node(node); end
  def visit_or_node(node); end
  def visit_parameters_node(node); end
  def visit_parentheses_node(node); end
  def visit_pinned_expression_node(node); end
  def visit_pinned_variable_node(node); end
  def visit_post_execution_node(node); end
  def visit_pre_execution_node(node); end
  def visit_program_node(node); end
  def visit_range_node(node); end
  def visit_rational_node(node); end
  def visit_redo_node(node); end
  def visit_regular_expression_node(node); end
  def visit_required_keyword_parameter_node(node); end
  def visit_required_parameter_node(node); end
  def visit_rescue_modifier_node(node); end
  def visit_rescue_node(node); end
  def visit_rest_parameter_node(node); end
  def visit_retry_node(node); end
  def visit_return_node(node); end
  def visit_self_node(node); end
  def visit_singleton_class_node(node); end
  def visit_source_encoding_node(node); end
  def visit_source_file_node(node); end
  def visit_source_line_node(node); end
  def visit_splat_node(node); end
  def visit_statements_node(node); end
  def visit_string_node(node); end
  def visit_super_node(node); end
  def visit_symbol_node(node); end
  def visit_true_node(node); end
  def visit_undef_node(node); end
  def visit_unless_node(node); end
  def visit_until_node(node); end
  def visit_when_node(node); end
  def visit_while_node(node); end
  def visit_x_string_node(node); end
  def visit_yield_node(node); end
end
class Spoom::ParseError < Spoom::Error
end
class Spoom::Model
  def [](full_name); end
  def compute_symbols_hierarchy!; end
  def finalize!; end
  def initialize; end
  def register_symbol(full_name); end
  def resolve_symbol(full_name, context:); end
  def subtypes(symbol); end
  def supertypes(symbol); end
  def symbols; end
  def symbols_hierarchy; end
end
class Spoom::Model::Error < Spoom::Error
end
class Spoom::Model::Comment
  def initialize(string, location); end
  def location; end
  def string; end
end
class Spoom::Model::Symbol
  def definitions; end
  def full_name; end
  def initialize(full_name); end
  def name; end
  def to_s; end
end
class Spoom::Model::UnresolvedSymbol < Spoom::Model::Symbol
  def to_s; end
end
class Spoom::Model::SymbolDef
  def comments; end
  def full_name; end
  def initialize(symbol, owner:, location:, comments:); end
  def location; end
  def name; end
  def owner; end
  def symbol; end
end
class Spoom::Model::Namespace < Spoom::Model::SymbolDef
  def children; end
  def initialize(symbol, owner:, location:, comments: nil); end
  def mixins; end
end
class Spoom::Model::SingletonClass < Spoom::Model::Namespace
end
class Spoom::Model::Class < Spoom::Model::Namespace
  def initialize(symbol, owner:, location:, superclass_name: nil, comments: nil); end
  def superclass_name; end
  def superclass_name=(arg0); end
end
class Spoom::Model::Module < Spoom::Model::Namespace
end
class Spoom::Model::Constant < Spoom::Model::SymbolDef
  def initialize(symbol, owner:, location:, value:, comments: nil); end
  def value; end
end
class Spoom::Model::Property < Spoom::Model::SymbolDef
  def initialize(symbol, owner:, location:, visibility:, sigs: nil, comments: nil); end
  def sigs; end
  def visibility; end
end
class Spoom::Model::Method < Spoom::Model::Property
end
class Spoom::Model::Attr < Spoom::Model::Property
end
class Spoom::Model::AttrReader < Spoom::Model::Attr
end
class Spoom::Model::AttrWriter < Spoom::Model::Attr
end
class Spoom::Model::AttrAccessor < Spoom::Model::Attr
end
class Spoom::Model::Visibility < T::Enum
end
class Spoom::Model::Mixin
  def initialize(name); end
  def name; end
end
class Spoom::Model::Include < Spoom::Model::Mixin
end
class Spoom::Model::Prepend < Spoom::Model::Mixin
end
class Spoom::Model::Extend < Spoom::Model::Mixin
end
class Spoom::Model::Sig
  def initialize(string); end
  def string; end
end
class Spoom::Model::NamespaceVisitor < Spoom::Visitor
  def initialize; end
  def visit(node); end
end
class Spoom::Model::Builder < Spoom::Model::NamespaceVisitor
  def collect_sigs; end
  def current_visibility; end
  def initialize(model, file); end
  def node_comments(node); end
  def node_location(node); end
  def visit_call_node(node); end
  def visit_class_node(node); end
  def visit_constant_path_write_node(node); end
  def visit_constant_write_node(node); end
  def visit_def_node(node); end
  def visit_module_node(node); end
  def visit_multi_write_node(node); end
  def visit_singleton_class_node(node); end
end
class Spoom::Model::Reference < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def constant?; end
  def kind; end
  def location; end
  def method?; end
  def name; end
  def self.constant(name, location); end
  def self.inherited(s); end
  def self.method(name, location); end
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
end
class Spoom::Model::Reference::Kind < T::Enum
end
class Spoom::Model::ReferencesVisitor < Spoom::Visitor
  def initialize(file); end
  def node_location(node); end
  def reference_constant(name, node); end
  def reference_method(name, node); end
  def references; end
  def visit_alias_method_node(node); end
  def visit_and_node(node); end
  def visit_block_argument_node(node); end
  def visit_call_and_write_node(node); end
  def visit_call_node(node); end
  def visit_call_operator_write_node(node); end
  def visit_call_or_write_node(node); end
  def visit_class_node(node); end
  def visit_constant_and_write_node(node); end
  def visit_constant_operator_write_node(node); end
  def visit_constant_or_write_node(node); end
  def visit_constant_path_node(node); end
  def visit_constant_path_write_node(node); end
  def visit_constant_read_node(node); end
  def visit_constant_write_node(node); end
  def visit_local_variable_and_write_node(node); end
  def visit_local_variable_operator_write_node(node); end
  def visit_local_variable_or_write_node(node); end
  def visit_local_variable_write_node(node); end
  def visit_module_node(node); end
  def visit_multi_write_node(node); end
  def visit_or_node(node); end
end
module Spoom::Source
end
class Spoom::Source::PositionError < Spoom::Error
end
class Spoom::Source::Edit
  def apply(bytes); end
  def range; end
end
class Spoom::Source::Insert < Spoom::Source::Edit
  def apply(bytes); end
  def initialize(position, text); end
  def position; end
  def range; end
  def text; end
  def to_s; end
end
class Spoom::Source::Replace < Spoom::Source::Edit
  def apply(bytes); end
  def from; end
  def initialize(from, to, text); end
  def range; end
  def text; end
  def to; end
  def to_s; end
end
class Spoom::Source::Delete < Spoom::Source::Edit
  def apply(bytes); end
  def from; end
  def initialize(from, to); end
  def range; end
  def to; end
  def to_s; end
end
class Spoom::Source::Rewriter
  def <<(other); end
  def initialize; end
  def rewrite!(bytes); end
end
module Spoom::Deadcode
  def self.load_custom_plugins(context); end
  def self.plugins_from_gemfile_lock(context); end
end
class Spoom::Deadcode::ERB < Erubi::Engine
  def add_code(code); end
  def add_expression(indicator, code); end
  def add_postamble(_); end
  def add_text(text); end
  def flush_newline_if_pending(src); end
  def initialize(input, properties = nil); end
end
class Spoom::Deadcode::Index
  def all_definitions; end
  def all_references; end
  def apply_plugins!(plugins); end
  def define(definition); end
  def definitions; end
  def definitions_for_name(name); end
  def finalize!; end
  def ignore(symbol_def); end
  def index_erb(erb, file:, plugins: nil); end
  def index_file(file, plugins: nil); end
  def index_ruby(rb, file:, plugins: nil); end
  def initialize(model); end
  def model; end
  def reference_constant(name, location); end
  def reference_method(name, location); end
  def references; end
end
class Spoom::Deadcode::Index::Error < Spoom::Error
  def initialize(message, parent:); end
end
class Spoom::Deadcode::Indexer < Spoom::Visitor
  def index; end
  def initialize(path, index, plugins: nil); end
  def path; end
  def visit_call_node(node); end
end
class Spoom::Deadcode::Definition < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def alive!; end
  def alive?; end
  def attr_reader?; end
  def attr_writer?; end
  def class?; end
  def constant?; end
  def dead?; end
  def full_name; end
  def ignored!; end
  def ignored?; end
  def kind; end
  def location; end
  def method?; end
  def module?; end
  def name; end
  def self.inherited(s); end
  def status; end
  def to_json(*args); end
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
end
class Spoom::Deadcode::Definition::Kind < T::Enum
end
class Spoom::Deadcode::Definition::Status < T::Enum
end
class Spoom::Deadcode::Send < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def args; end
  def block; end
  def each_arg(arg_type, &block); end
  def each_arg_assoc(&block); end
  def location; end
  def name; end
  def node; end
  def recv; end
  def self.inherited(s); end
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
end
module Spoom::Deadcode::Plugins
end
class Spoom::Deadcode::Plugins::Base
  def camelize(name); end
  def ignored_class_name?(name); end
  def ignored_constant_name?(name); end
  def ignored_method_name?(name); end
  def ignored_module_name?(name); end
  def ignored_name?(name, names_variable, patterns_variable); end
  def ignored_subclass?(definition); end
  def index; end
  def initialize(index); end
  def internal_on_define_accessor(definition); end
  def internal_on_define_class(definition); end
  def internal_on_define_constant(definition); end
  def internal_on_define_method(definition); end
  def internal_on_define_module(definition); end
  def names(const); end
  def on_define_accessor(definition); end
  def on_define_class(definition); end
  def on_define_constant(definition); end
  def on_define_method(definition); end
  def on_define_module(definition); end
  def on_send(send); end
  def patterns(const); end
  def self.ignore_classes_inheriting_from(*names); end
  def self.ignore_classes_named(*names); end
  def self.ignore_constants_named(*names); end
  def self.ignore_methods_named(*names); end
  def self.ignore_modules_named(*names); end
  def self.save_names_and_patterns(names, names_variable, patterns_variable); end
  def subclass_of?(definition, superclass_name); end
end
class Spoom::Deadcode::Plugins::ActionPack < Spoom::Deadcode::Plugins::Base
  def on_define_method(definition); end
  def on_send(send); end
end
class Spoom::Deadcode::Plugins::ActiveJob < Spoom::Deadcode::Plugins::Base
  def on_send(send); end
end
class Spoom::Deadcode::Plugins::ActionMailerPreview < Spoom::Deadcode::Plugins::Base
  def on_define_method(definition); end
end
class Spoom::Deadcode::Plugins::ActionMailer < Spoom::Deadcode::Plugins::Base
  def on_send(send); end
end
class Spoom::Deadcode::Plugins::ActiveModel < Spoom::Deadcode::Plugins::Base
  def on_send(send); end
end
class Spoom::Deadcode::Plugins::ActiveRecord < Spoom::Deadcode::Plugins::Base
  def on_send(send); end
end
class Spoom::Deadcode::Plugins::ActiveSupport < Spoom::Deadcode::Plugins::Base
  def on_send(send); end
end
class Spoom::Deadcode::Plugins::GraphQL < Spoom::Deadcode::Plugins::Base
  def on_send(send); end
end
class Spoom::Deadcode::Plugins::Minitest < Spoom::Deadcode::Plugins::Base
  def on_define_method(definition); end
  def on_send(send); end
end
class Spoom::Deadcode::Plugins::Namespaces < Spoom::Deadcode::Plugins::Base
  def on_define_class(definition); end
  def on_define_module(definition); end
  def used_as_namespace?(symbol_def); end
end
class Spoom::Deadcode::Plugins::Rails < Spoom::Deadcode::Plugins::Base
  def file_is_helper?(symbol_def); end
  def on_define_class(definition); end
  def on_define_module(definition); end
end
class Spoom::Deadcode::Plugins::Rake < Spoom::Deadcode::Plugins::Base
end
class Spoom::Deadcode::Plugins::RSpec < Spoom::Deadcode::Plugins::Base
end
class Spoom::Deadcode::Plugins::Rubocop < Spoom::Deadcode::Plugins::Base
  def on_define_constant(definition); end
  def on_define_method(definition); end
end
class Spoom::Deadcode::Plugins::Ruby < Spoom::Deadcode::Plugins::Base
  def on_send(send); end
  def reference_symbol_as_constant(send, node); end
end
class Spoom::Deadcode::Plugins::Sorbet < Spoom::Deadcode::Plugins::Base
  def on_define_constant(definition); end
  def on_define_method(definition); end
  def sorbet_enum_constant?(definition); end
  def sorbet_type_member?(definition); end
end
class Spoom::Deadcode::Plugins::Thor < Spoom::Deadcode::Plugins::Base
  def on_define_method(definition); end
end
class Spoom::Deadcode::Remover
  def initialize(context); end
  def remove_location(kind, location); end
end
class Spoom::Deadcode::Remover::Error < Spoom::Error
end
class Spoom::Deadcode::Remover::NodeRemover
  def apply_edit; end
  def delete_attr_accessor(context); end
  def delete_chars(start_char, end_char); end
  def delete_constant_assignment(context); end
  def delete_lines(start_line, end_line); end
  def delete_node_and_comments_and_sigs(context); end
  def initialize(source, kind, location); end
  def insert_accessor(node, send_context, was_removed:); end
  def new_source; end
  def replace_chars(start_char, end_char, replacement); end
  def transform_sig(node, name:, kind:); end
end
class Spoom::Deadcode::Remover::NodeContext
  def attached_comments(node); end
  def attached_sig; end
  def attached_sigs; end
  def comments; end
  def comments_between_lines(start_line, end_line); end
  def initialize(source, comments, node, nesting); end
  def nesting; end
  def nesting=(arg0); end
  def next_node; end
  def next_nodes; end
  def node; end
  def parent_context; end
  def parent_node; end
  def previous_node; end
  def previous_nodes; end
  def sclass_context; end
  def sorbet_extend_sig?(node); end
  def sorbet_signature?(node); end
end
class Spoom::Deadcode::Remover::NodeFinder < Spoom::Visitor
  def initialize(location, kind); end
  def node; end
  def nodes_nesting; end
  def self.find(source, location, kind); end
  def self.node_match_kind?(node, kind); end
  def visit(node); end
end
module Spoom::RBS
end
class Spoom::RBS::Comments
  def annotations; end
  def class_annotations; end
  def empty?; end
  def initialize; end
  def method_annotations; end
  def signatures; end
end
class Spoom::RBS::Comment
  def initialize(string, location); end
  def location; end
  def string; end
end
class Spoom::RBS::Annotation < Spoom::RBS::Comment
end
class Spoom::RBS::Signature < Spoom::RBS::Comment
end
module Spoom::RBS::ExtractRBSComments
  def node_rbs_comments(node); end
end
class Spoom::Counters < Hash
  def [](key); end
  def increment(key); end
  def initialize; end
end
module Spoom::Sorbet
end
class Spoom::Sorbet::Config
  def allowed_extensions; end
  def allowed_extensions=(arg0); end
  def copy; end
  def ignore; end
  def ignore=(arg0); end
  def initialize; end
  def no_stdlib; end
  def no_stdlib=(arg0); end
  def options_string; end
  def paths; end
  def paths=(arg0); end
  def self.parse_file(sorbet_config_path); end
  def self.parse_option(line); end
  def self.parse_string(sorbet_config); end
end
module Spoom::Sorbet::Errors
  def self.sort_errors_by_code(errors); end
  def self.to_junit_xml(errors); end
end
class Spoom::Sorbet::Errors::Parser
  def append_error(line); end
  def close_error; end
  def error_line_match_regexp(error_url_base); end
  def initialize(error_url_base: nil); end
  def match_error_line(line); end
  def open_error(error); end
  def parse(output); end
  def self.parse_string(output, error_url_base: nil); end
end
class Spoom::Sorbet::Errors::Parser::ParseError < Spoom::Error
end
class Spoom::Sorbet::Errors::Error
  def <=>(other); end
  def code; end
  def file; end
  def files_from_error_sections; end
  def initialize(file, line, message, code, more = nil); end
  def line; end
  def message; end
  def more; end
  def to_junit_xml_element; end
  def to_s; end
  include Comparable
end
module Spoom::LSP
end
class Spoom::LSP::Message
  def as_json; end
  def initialize; end
  def to_json(*args); end
end
class Spoom::LSP::Request < Spoom::LSP::Message
  def id; end
  def initialize(id, method, params); end
  def params; end
end
class Spoom::LSP::Notification < Spoom::LSP::Message
  def initialize(method, params); end
  def method; end
  def params; end
end
class Spoom::Printer
  def colorize(string, *color); end
  def dedent; end
  def indent; end
  def initialize(out: nil, colors: nil, indent_level: nil); end
  def out; end
  def out=(arg0); end
  def print(string); end
  def print_colored(string, *color); end
  def printl(string); end
  def printn; end
  def printt; end
  include Spoom::Colorize
end
module Spoom::LSP::PrintableSymbol
  def accept_printer(printer); end
end
class Spoom::LSP::Hover < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def accept_printer(printer); end
  def contents; end
  def range; end
  def self.from_json(json); end
  def self.inherited(s); end
  def to_s; end
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  include Spoom::LSP::PrintableSymbol
end
class Spoom::LSP::Position < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def accept_printer(printer); end
  def char; end
  def line; end
  def self.from_json(json); end
  def self.inherited(s); end
  def to_s; end
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  include Spoom::LSP::PrintableSymbol
end
class Spoom::LSP::Range < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def accept_printer(printer); end
  def end; end
  def self.from_json(json); end
  def self.inherited(s); end
  def start; end
  def to_s; end
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  include Spoom::LSP::PrintableSymbol
end
class Spoom::LSP::Location < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def accept_printer(printer); end
  def range; end
  def self.from_json(json); end
  def self.inherited(s); end
  def to_s; end
  def uri; end
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  include Spoom::LSP::PrintableSymbol
end
class Spoom::LSP::SignatureHelp < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def accept_printer(printer); end
  def doc; end
  def label; end
  def params; end
  def self.from_json(json); end
  def self.inherited(s); end
  def to_s; end
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  include Spoom::LSP::PrintableSymbol
end
class Spoom::LSP::Diagnostic < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def accept_printer(printer); end
  def code; end
  def information; end
  def message; end
  def range; end
  def self.from_json(json); end
  def self.inherited(s); end
  def to_s; end
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  include Spoom::LSP::PrintableSymbol
end
class Spoom::LSP::DocumentSymbol < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def accept_printer(printer); end
  def children; end
  def detail; end
  def kind; end
  def kind_string; end
  def location; end
  def name; end
  def range; end
  def self.from_json(json); end
  def self.inherited(s); end
  def to_s; end
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  include Spoom::LSP::PrintableSymbol
end
class Spoom::LSP::SymbolPrinter < Spoom::Printer
  def clean_uri(uri); end
  def initialize(out: nil, colors: nil, indent_level: nil, prefix: nil); end
  def prefix; end
  def prefix=(arg0); end
  def print_list(objects); end
  def print_object(object); end
  def print_objects(objects); end
  def seen; end
end
class Spoom::LSP::Error < Spoom::Error
end
class Spoom::LSP::Error::AlreadyOpen < Spoom::LSP::Error
end
class Spoom::LSP::Error::BadHeaders < Spoom::LSP::Error
end
class Spoom::LSP::Error::Diagnostics < Spoom::LSP::Error
  def diagnostics; end
  def initialize(uri, diagnostics); end
  def self.from_json(json); end
  def uri; end
end
class Spoom::LSP::ResponseError < Spoom::LSP::Error
  def code; end
  def data; end
  def initialize(code, message, data); end
  def self.from_json(json); end
end
class Spoom::LSP::Client
  def close; end
  def definitions(uri, line, column); end
  def document_symbols(uri); end
  def hover(uri, line, column); end
  def initialize(sorbet_bin, *sorbet_args, path: nil); end
  def next_id; end
  def open(workspace_path); end
  def read; end
  def read_raw; end
  def references(uri, line, column, include_decl = nil); end
  def send(message); end
  def send_raw(json_string); end
  def signatures(uri, line, column); end
  def symbols(query); end
  def type_definitions(uri, line, column); end
end
module Spoom::Sorbet::Metrics
  def self.collect_code_metrics(files); end
end
class Spoom::Sorbet::Metrics::CodeMetricsVisitor < Spoom::Visitor
  def collect_last_srb_sigs; end
  def initialize(counters); end
  def node_key(node); end
  def visit(node); end
  def visit_attr_accessor(node); end
  def visit_call_node(node); end
  def visit_class_node(node); end
  def visit_def_node(node); end
  def visit_module_node(node); end
  def visit_scope(node, &block); end
  def visit_sig(node); end
  def visit_singleton_class_node(node); end
  def visit_type_member(node); end
  include Spoom::RBS::ExtractRBSComments
end
module Spoom::Sorbet::Sigils
  def self.change_sigil_in_file(path, new_strictness); end
  def self.change_sigil_in_files(path_list, new_strictness); end
  def self.file_strictness(path); end
  def self.sigil_string(strictness); end
  def self.strictness_in_content(content); end
  def self.update_sigil(content, new_strictness); end
  def self.valid_strictness?(strictness); end
end
module Spoom::Sorbet::Metrics::MetricsFileParser
  def self.parse_file(path, prefix = nil); end
  def self.parse_hash(obj, prefix = nil); end
  def self.parse_string(string, prefix = nil); end
end
module Spoom::Sorbet::Translate
  def self.rbs_comments_to_sorbet_sigs(ruby_contents, file:, max_line_length: nil); end
  def self.sorbet_assertions_to_rbs_comments(ruby_contents, file:); end
  def self.sorbet_sigs_to_rbs_comments(ruby_contents, file:, positional_names: nil, max_line_length: nil); end
  def self.strip_sorbet_sigs(ruby_contents, file:); end
end
class Spoom::Sorbet::Translate::Translator < Spoom::Visitor
  def adjust_to_line_end(offset); end
  def adjust_to_line_start(offset); end
  def adjust_to_new_line(offset); end
  def initialize(ruby_contents, file:); end
  def rewrite; end
  def sorbet_sig?(node); end
end
class Spoom::Sorbet::Translate::RBSCommentsToSorbetSigs < Spoom::Sorbet::Translate::Translator
  def already_extends?(node, constant_regex); end
  def apply_class_annotations(node); end
  def apply_member_annotations(annotations, sig); end
  def initialize(ruby_contents, file:, max_line_length: nil); end
  def visit_attr(node); end
  def visit_call_node(node); end
  def visit_class_node(node); end
  def visit_def_node(node); end
  def visit_module_node(node); end
  def visit_singleton_class_node(node); end
  include Spoom::RBS::ExtractRBSComments
end
class Spoom::Sorbet::Translate::SorbetAssertionsToRBSComments < Spoom::Sorbet::Translate::Translator
  def at_end_of_line?(node); end
  def build_rbs_annotation(call); end
  def dedent_value(assign, value); end
  def maybe_translate_assertion(node); end
  def t?(node); end
  def t_annotation?(node); end
  def visit_if_node(node); end
  def visit_statements_node(node); end
end
class Spoom::Sorbet::Translate::SorbetSigsToRBSComments < Spoom::Sorbet::Translate::Translator
  def apply_class_annotation(parent, node); end
  def apply_member_annotations(sigs); end
  def build_type_member_string(node); end
  def collect_last_sigs; end
  def delete_extend_t_generics; end
  def delete_extend_t_helpers; end
  def initialize(ruby_contents, file:, positional_names:, max_line_length: nil); end
  def rbs_print(indent, &block); end
  def visit_attr(node); end
  def visit_call_node(node); end
  def visit_class_node(node); end
  def visit_constant_write_node(node); end
  def visit_def_node(node); end
  def visit_extend(node); end
  def visit_module_node(node); end
  def visit_scope(node, &block); end
  def visit_sig(node); end
  def visit_singleton_class_node(node); end
end
class Spoom::Sorbet::Translate::StripSorbetSigs < Spoom::Sorbet::Translate::Translator
  def visit_call_node(node); end
end
class Spoom::Sorbet::Translate::Error < Spoom::Error
end
class Spoom::Sorbet::Error < Spoom::Error
  def initialize(message, result); end
  def result; end
end
class Spoom::Sorbet::Error::Killed < Spoom::Sorbet::Error
end
class Spoom::Sorbet::Error::Segfault < Spoom::Sorbet::Error
end
module Spoom::Cli
end
module Spoom::Cli::Helper
  def blue(string); end
  def collect_files(paths, include_rbi_files: nil); end
  def color?; end
  def colorize(string, *color); end
  def context; end
  def context_requiring_sorbet!; end
  def cyan(string); end
  def exec_path; end
  def gray(string); end
  def green(string); end
  def highlight(string); end
  def red(string); end
  def say(message); end
  def say_error(message, status: nil, nl: nil); end
  def say_warning(message, status: nil, nl: nil); end
  def yellow(string); end
  include Spoom::Colorize
end
class Spoom::Cli::Deadcode < Thor
  def deadcode(*paths); end
  def help(command = nil, subcommand = nil); end
  def remove(location_string); end
  include Spoom::Cli::Helper
end
module Spoom::Cli::Srb
end
class Spoom::Cli::Srb::Assertions < Thor
  def help(command = nil, subcommand = nil); end
  def transform_files(files, &block); end
  def translate(*paths); end
  include Spoom::Cli::Helper
end
class Spoom::Cli::Srb::Bump < Thor
  def bump(directory = nil); end
  def help(command = nil, subcommand = nil); end
  def print_changes(files, command:, from: nil, to: nil, dry: nil, path: nil); end
  def undo_changes(files, from_strictness); end
  include Spoom::Cli::Helper
end
module Spoom::Coverage
  def self.file_tree(context); end
  def self.report(context, snapshots, palette:); end
  def self.snapshot(context, rbi: nil, sorbet_bin: nil); end
end
class Spoom::Coverage::Snapshot < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def calls_typed; end
  def calls_typed=(val); end
  def calls_untyped; end
  def calls_untyped=(val); end
  def classes; end
  def classes=(val); end
  def commit_sha; end
  def commit_sha=(val); end
  def commit_timestamp; end
  def commit_timestamp=(val); end
  def duration; end
  def duration=(val); end
  def files; end
  def files=(val); end
  def methods_with_sig; end
  def methods_with_sig=(val); end
  def methods_with_sig_excluding_rbis; end
  def methods_with_sig_excluding_rbis=(val); end
  def methods_without_sig; end
  def methods_without_sig=(val); end
  def methods_without_sig_excluding_rbis; end
  def methods_without_sig_excluding_rbis=(val); end
  def modules; end
  def modules=(val); end
  def print(out: nil, colors: nil, indent_level: nil); end
  def rbi_files; end
  def rbi_files=(val); end
  def self.from_json(json); end
  def self.from_obj(obj); end
  def self.inherited(s); end
  def sigils; end
  def sigils=(val); end
  def sigils_excluding_rbis; end
  def sigils_excluding_rbis=(val); end
  def singleton_classes; end
  def singleton_classes=(val); end
  def timestamp; end
  def timestamp=(val); end
  def to_json(*arg); end
  def version_runtime; end
  def version_runtime=(val); end
  def version_static; end
  def version_static=(val); end
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
end
class Spoom::Coverage::SnapshotPrinter < Spoom::Printer
  def percent(value, total); end
  def print_map(hash, total); end
  def print_snapshot(snapshot); end
end
module Spoom::Coverage::D3
  def self.header_script(palette); end
  def self.header_style; end
end
class Spoom::Coverage::D3::Base
  def html; end
  def id; end
  def initialize(id, data); end
  def script; end
  def self.header_script; end
  def self.header_style; end
  def tooltip; end
end
class Spoom::Coverage::D3::CircleMap < Spoom::Coverage::D3::Base
  def script; end
  def self.header_script; end
  def self.header_style; end
end
class Spoom::Coverage::D3::CircleMap::Sigils < Spoom::Coverage::D3::CircleMap
  def initialize(id, file_tree, nodes_strictnesses, nodes_scores); end
  def tree_node_to_json(node); end
end
class Spoom::Coverage::D3::Pie < Spoom::Coverage::D3::Base
  def initialize(id, title, data); end
  def script; end
  def self.header_script; end
  def self.header_style; end
end
class Spoom::Coverage::D3::Pie::Sigils < Spoom::Coverage::D3::Pie
  def initialize(id, title, snapshot); end
  def tooltip; end
end
class Spoom::Coverage::D3::Pie::Calls < Spoom::Coverage::D3::Pie
  def initialize(id, title, snapshot); end
  def tooltip; end
end
class Spoom::Coverage::D3::Pie::Sigs < Spoom::Coverage::D3::Pie
  def initialize(id, title, snapshot); end
  def tooltip; end
end
class Spoom::Coverage::D3::Timeline < Spoom::Coverage::D3::Base
  def area(y:, color: nil, curve: nil); end
  def initialize(id, data, keys); end
  def line(y:, color: nil, curve: nil); end
  def plot; end
  def points(y:); end
  def script; end
  def self.header_script; end
  def self.header_style; end
  def x_scale; end
  def x_ticks; end
  def y_scale(min:, max:, ticks:); end
  def y_ticks(ticks:, format:, padding:); end
end
class Spoom::Coverage::D3::Timeline::Versions < Spoom::Coverage::D3::Timeline
  def initialize(id, snapshots); end
  def plot; end
  def tooltip; end
end
class Spoom::Coverage::D3::Timeline::Runtimes < Spoom::Coverage::D3::Timeline
  def initialize(id, snapshots); end
  def plot; end
  def tooltip; end
end
class Spoom::Coverage::D3::Timeline::Stacked < Spoom::Coverage::D3::Timeline
  def line(y:, color: nil, curve: nil); end
  def plot; end
  def script; end
end
class Spoom::Coverage::D3::Timeline::Sigils < Spoom::Coverage::D3::Timeline::Stacked
  def initialize(id, snapshots); end
  def tooltip; end
end
class Spoom::Coverage::D3::Timeline::Calls < Spoom::Coverage::D3::Timeline::Stacked
  def initialize(id, snapshots); end
  def tooltip; end
end
class Spoom::Coverage::D3::Timeline::Sigs < Spoom::Coverage::D3::Timeline::Stacked
  def initialize(id, snapshots); end
  def tooltip; end
end
class Spoom::Coverage::D3::Timeline::RBIs < Spoom::Coverage::D3::Timeline::Stacked
  def initialize(id, snapshots); end
  def line(y:, color: nil, curve: nil); end
  def plot; end
  def script; end
  def tooltip; end
end
class Spoom::Coverage::D3::ColorPalette < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def false; end
  def false=(val); end
  def ignore; end
  def ignore=(val); end
  def self.inherited(s); end
  def strict; end
  def strict=(val); end
  def strong; end
  def strong=(val); end
  def true; end
  def true=(val); end
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
end
class Spoom::Coverage::Template
  def erb; end
  def get_binding; end
  def html; end
  def initialize(template:); end
end
class Spoom::Coverage::Page < Spoom::Coverage::Template
  def body_html; end
  def cards; end
  def footer_html; end
  def header_html; end
  def header_script; end
  def header_style; end
  def initialize(title:, palette:, template: nil); end
  def palette; end
  def title; end
end
module Spoom::Coverage::Cards
end
class Spoom::Coverage::Cards::Card < Spoom::Coverage::Template
  def body; end
  def initialize(template: nil, title: nil, body: nil); end
  def title; end
end
class Spoom::Coverage::Cards::Erb < Spoom::Coverage::Cards::Card
  def erb; end
  def html; end
  def initialize; end
end
class Spoom::Coverage::Cards::Snapshot < Spoom::Coverage::Cards::Card
  def initialize(snapshot:, title: nil); end
  def pie_calls; end
  def pie_sigils; end
  def pie_sigs; end
  def snapshot; end
end
class Spoom::Coverage::Cards::Map < Spoom::Coverage::Cards::Card
  def initialize(file_tree:, nodes_strictnesses:, nodes_strictness_scores:, title: nil); end
end
class Spoom::Coverage::Cards::Timeline < Spoom::Coverage::Cards::Card
  def initialize(title:, timeline:); end
end
class Spoom::Coverage::Cards::Timeline::Sigils < Spoom::Coverage::Cards::Timeline
  def initialize(snapshots:, title: nil); end
end
class Spoom::Coverage::Cards::Timeline::Calls < Spoom::Coverage::Cards::Timeline
  def initialize(snapshots:, title: nil); end
end
class Spoom::Coverage::Cards::Timeline::Sigs < Spoom::Coverage::Cards::Timeline
  def initialize(snapshots:, title: nil); end
end
class Spoom::Coverage::Cards::Timeline::RBIs < Spoom::Coverage::Cards::Timeline
  def initialize(snapshots:, title: nil); end
end
class Spoom::Coverage::Cards::Timeline::Versions < Spoom::Coverage::Cards::Timeline
  def initialize(snapshots:, title: nil); end
end
class Spoom::Coverage::Cards::Timeline::Runtimes < Spoom::Coverage::Cards::Timeline
  def initialize(snapshots:, title: nil); end
end
class Spoom::Coverage::Cards::SorbetIntro < Spoom::Coverage::Cards::Erb
  def erb; end
  def initialize(sorbet_intro_commit: nil, sorbet_intro_date: nil); end
end
class Spoom::Coverage::Report < Spoom::Coverage::Page
  def cards; end
  def header_html; end
  def initialize(project_name:, palette:, snapshots:, file_tree:, nodes_strictnesses:, nodes_strictness_scores:, sorbet_intro_commit: nil, sorbet_intro_date: nil); end
end
class Spoom::FileTree
  def add_path(path); end
  def add_paths(paths); end
  def initialize(paths = nil); end
  def nodes; end
  def nodes_strictness_scores(context); end
  def paths; end
  def paths_strictness_scores(context); end
  def print(out: nil, colors: nil); end
  def roots; end
end
class Spoom::FileTree::Node < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def children; end
  def name; end
  def parent; end
  def path; end
  def self.inherited(s); end
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
end
class Spoom::FileTree::Visitor
  def visit_node(node); end
  def visit_nodes(nodes); end
  def visit_tree(tree); end
end
class Spoom::FileTree::CollectNodes < Spoom::FileTree::Visitor
  def initialize; end
  def nodes; end
  def visit_node(node); end
end
class Spoom::FileTree::CollectStrictnesses < Spoom::FileTree::Visitor
  def initialize(context); end
  def strictnesses; end
  def visit_node(node); end
end
class Spoom::FileTree::CollectScores < Spoom::FileTree::CollectStrictnesses
  def initialize(context); end
  def node_score(node); end
  def scores; end
  def strictness_score(strictness); end
  def visit_node(node); end
end
class Spoom::FileTree::Printer < Spoom::FileTree::Visitor
  def initialize(strictnesses, out: nil, colors: nil); end
  def strictness_color(strictness); end
  def visit_node(node); end
end
class Spoom::Timeline
  def commits_for_dates(dates); end
  def initialize(context, from, to); end
  def months; end
  def ticks; end
end
class Spoom::Cli::Srb::Coverage < Thor
  def bundle_install(path, sha); end
  def help(command = nil, subcommand = nil); end
  def message_no_data(file); end
  def open(file = nil); end
  def parse_time(string, option); end
  def report; end
  def snapshot; end
  def timeline; end
  include Spoom::Cli::Helper
end
class Spoom::Cli::Srb::LSP < Thor
  def defs(file, line, col); end
  def find(query); end
  def help(command = nil, subcommand = nil); end
  def hover(file, line, col); end
  def list; end
  def lsp_client; end
  def refs(file, line, col); end
  def run(&block); end
  def sigs(file, line, col); end
  def symbol_printer; end
  def symbols(file); end
  def to_uri(path); end
  def types(file, line, col); end
  include Spoom::Cli::Helper
end
class Spoom::Cli::Srb::Metrics < Thor
  def help(command = nil, subcommand = nil); end
  def show(*paths); end
  include Spoom::Cli::Helper
end
class Spoom::Cli::Srb::Sigs < Thor
  def exec(context, command); end
  def export(output_path = nil); end
  def help(command = nil, subcommand = nil); end
  def strip(*paths); end
  def transform_files(files, &block); end
  def translate(*paths); end
  include Spoom::Cli::Helper
end
class Spoom::Cli::Srb::Tc < Thor
  def colorize_message(message); end
  def format_error(error, format); end
  def help(command = nil, subcommand = nil); end
  def tc(*paths_to_select); end
  include Spoom::Cli::Helper
end
class Spoom::Cli::Srb::Main < Thor
  def assertions(*args); end
  def bump(*args); end
  def coverage(*args); end
  def help(command = nil, subcommand = nil); end
  def lsp(*args); end
  def metrics(*args); end
  def sigs(*args); end
  def tc(*args); end
end
class Spoom::Cli::Main < Thor
  def __print_version; end
  def bump(directory = nil); end
  def coverage(*args); end
  def deadcode(*args); end
  def lsp(*args); end
  def self.exit_on_failure?; end
  def srb(*args); end
  def tc(*paths_to_select); end
  include Spoom::Cli::Helper
end
class Spoom::Error < StandardError
end
